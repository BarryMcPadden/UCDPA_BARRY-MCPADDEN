{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26f12df9-8f39-4b90-b88d-b9229ab637c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "Retrieving API "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "088a5618-6be7-432c-92e8-66c0798be7b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "22483e34-7314-4e50-a9da-f1a1431b91a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "exchange_rates=requests.get('https://api.coingecko.com/api/v3/exchange_rates')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cf68f4a0-83d1-48d5-9e23-085a22b5b4d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [200]>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "04f4d670-c628-48d1-9434-b357d8d6ce9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'{\"rates\":{\"btc\":{\"name\":\"Bitcoin\",\"unit\":\"BTC\",\"value\":1.0,\"type\":\"crypto\"},\"eth\":{\"name\":\"Ether\",\"unit\":\"ETH\",\"value\":14.638,\"type\":\"crypto\"},\"ltc\":{\"name\":\"Litecoin\",\"unit\":\"LTC\",\"value\":342.074,\"type\":\"crypto\"},\"bch\":{\"name\":\"Bitcoin Cash\",\"unit\":\"BCH\",\"value\":125.8,\"type\":\"crypto\"},\"bnb\":{\"name\":\"Binance Coin\",\"unit\":\"BNB\",\"value\":98.125,\"type\":\"crypto\"},\"eos\":{\"name\":\"EOS\",\"unit\":\"EOS\",\"value\":16597.485,\"type\":\"crypto\"},\"xrp\":{\"name\":\"XRP\",\"unit\":\"XRP\",\"value\":60234.093,\"type\":\"crypto\"},\"xlm\":{\"name\":\"Lumens\",\"unit\":\"XLM\",\"value\":189154.769,\"type\":\"crypto\"},\"link\":{\"name\":\"Chainlink\",\"unit\":\"LINK\",\"value\":2415.525,\"type\":\"crypto\"},\"dot\":{\"name\":\"Polkadot\",\"unit\":\"DOT\",\"value\":2023.816,\"type\":\"crypto\"},\"yfi\":{\"name\":\"Yearn.finance\",\"unit\":\"YFI\",\"value\":1.527,\"type\":\"crypto\"},\"usd\":{\"name\":\"US Dollar\",\"unit\":\"$\",\"value\":38115.811,\"type\":\"fiat\"},\"aed\":{\"name\":\"United Arab Emirates Dirham\",\"unit\":\"DH\",\"value\":139999.374,\"type\":\"fiat\"},\"ars\":{\"name\":\"Argentine Peso\",\"unit\":\"$\",\"value\":3989854.103,\"type\":\"fiat\"},\"aud\":{\"name\":\"Australian Dollar\",\"unit\":\"A$\",\"value\":53172.052,\"type\":\"fiat\"},\"bdt\":{\"name\":\"Bangladeshi Taka\",\"unit\":\"৳\",\"value\":3277066.594,\"type\":\"fiat\"},\"bhd\":{\"name\":\"Bahraini Dinar\",\"unit\":\"BD\",\"value\":14367.03,\"type\":\"fiat\"},\"bmd\":{\"name\":\"Bermudian Dollar\",\"unit\":\"$\",\"value\":38115.811,\"type\":\"fiat\"},\"brl\":{\"name\":\"Brazil Real\",\"unit\":\"R$\",\"value\":206574.356,\"type\":\"fiat\"},\"cad\":{\"name\":\"Canadian Dollar\",\"unit\":\"CA$\",\"value\":47989.826,\"type\":\"fiat\"},\"chf\":{\"name\":\"Swiss Franc\",\"unit\":\"Fr.\",\"value\":35108.931,\"type\":\"fiat\"},\"clp\":{\"name\":\"Chilean Peso\",\"unit\":\"CLP$\",\"value\":30526190.863,\"type\":\"fiat\"},\"cny\":{\"name\":\"Chinese Yuan\",\"unit\":\"¥\",\"value\":240933.854,\"type\":\"fiat\"},\"czk\":{\"name\":\"Czech Koruna\",\"unit\":\"Kč\",\"value\":827097.856,\"type\":\"fiat\"},\"dkk\":{\"name\":\"Danish Krone\",\"unit\":\"kr.\",\"value\":251310.883,\"type\":\"fiat\"},\"eur\":{\"name\":\"Euro\",\"unit\":\"€\",\"value\":33769.541,\"type\":\"fiat\"},\"gbp\":{\"name\":\"British Pound Sterling\",\"unit\":\"£\",\"value\":28193.884,\"type\":\"fiat\"},\"hkd\":{\"name\":\"Hong Kong Dollar\",\"unit\":\"HK$\",\"value\":296727.969,\"type\":\"fiat\"},\"huf\":{\"name\":\"Hungarian Forint\",\"unit\":\"Ft\",\"value\":12153622.42,\"type\":\"fiat\"},\"idr\":{\"name\":\"Indonesian Rupiah\",\"unit\":\"Rp\",\"value\":546345941.35,\"type\":\"fiat\"},\"ils\":{\"name\":\"Israeli New Shekel\",\"unit\":\"₪\",\"value\":121121.375,\"type\":\"fiat\"},\"inr\":{\"name\":\"Indian Rupee\",\"unit\":\"₹\",\"value\":2853772.558,\"type\":\"fiat\"},\"jpy\":{\"name\":\"Japanese Yen\",\"unit\":\"¥\",\"value\":4358714.53,\"type\":\"fiat\"},\"krw\":{\"name\":\"South Korean Won\",\"unit\":\"₩\",\"value\":45597353.746,\"type\":\"fiat\"},\"kwd\":{\"name\":\"Kuwaiti Dinar\",\"unit\":\"KD\",\"value\":11528.05,\"type\":\"fiat\"},\"lkr\":{\"name\":\"Sri Lankan Rupee\",\"unit\":\"Rs\",\"value\":7732881.382,\"type\":\"fiat\"},\"mmk\":{\"name\":\"Burmese Kyat\",\"unit\":\"K\",\"value\":67770961.733,\"type\":\"fiat\"},\"mxn\":{\"name\":\"Mexican Peso\",\"unit\":\"MX$\",\"value\":787369.441,\"type\":\"fiat\"},\"myr\":{\"name\":\"Malaysian Ringgit\",\"unit\":\"RM\",\"value\":159705.248,\"type\":\"fiat\"},\"ngn\":{\"name\":\"Nigerian Naira\",\"unit\":\"₦\",\"value\":15830258.702,\"type\":\"fiat\"},\"nok\":{\"name\":\"Norwegian Krone\",\"unit\":\"kr\",\"value\":338199.077,\"type\":\"fiat\"},\"nzd\":{\"name\":\"New Zealand Dollar\",\"unit\":\"NZ$\",\"value\":56977.306,\"type\":\"fiat\"},\"php\":{\"name\":\"Philippine Peso\",\"unit\":\"₱\",\"value\":1949032.87,\"type\":\"fiat\"},\"pkr\":{\"name\":\"Pakistani Rupee\",\"unit\":\"₨\",\"value\":6727440.674,\"type\":\"fiat\"},\"pln\":{\"name\":\"Polish Zloty\",\"unit\":\"zł\",\"value\":154735.48,\"type\":\"fiat\"},\"rub\":{\"name\":\"Russian Ruble\",\"unit\":\"₽\",\"value\":3034459.951,\"type\":\"fiat\"},\"sar\":{\"name\":\"Saudi Riyal\",\"unit\":\"SR\",\"value\":142982.66,\"type\":\"fiat\"},\"sek\":{\"name\":\"Swedish Krona\",\"unit\":\"kr\",\"value\":352617.068,\"type\":\"fiat\"},\"sgd\":{\"name\":\"Singapore Dollar\",\"unit\":\"S$\",\"value\":51253.302,\"type\":\"fiat\"},\"thb\":{\"name\":\"Thai Baht\",\"unit\":\"฿\",\"value\":1258319.371,\"type\":\"fiat\"},\"try\":{\"name\":\"Turkish Lira\",\"unit\":\"₺\",\"value\":517791.86,\"type\":\"fiat\"},\"twd\":{\"name\":\"New Taiwan Dollar\",\"unit\":\"NT$\",\"value\":1058285.459,\"type\":\"fiat\"},\"uah\":{\"name\":\"Ukrainian hryvnia\",\"unit\":\"₴\",\"value\":1097325.579,\"type\":\"fiat\"},\"vef\":{\"name\":\"Venezuelan bolívar fuerte\",\"unit\":\"Bs.F\",\"value\":3816.536,\"type\":\"fiat\"},\"vnd\":{\"name\":\"Vietnamese đồng\",\"unit\":\"₫\",\"value\":862739093.26,\"type\":\"fiat\"},\"zar\":{\"name\":\"South African Rand\",\"unit\":\"R\",\"value\":578572.59,\"type\":\"fiat\"},\"xdr\":{\"name\":\"IMF Special Drawing Rights\",\"unit\":\"XDR\",\"value\":27128.547,\"type\":\"fiat\"},\"xag\":{\"name\":\"Silver - Troy Ounce\",\"unit\":\"XAG\",\"value\":1603.797,\"type\":\"commodity\"},\"xau\":{\"name\":\"Gold - Troy Ounce\",\"unit\":\"XAU\",\"value\":20.828,\"type\":\"commodity\"},\"bits\":{\"name\":\"Bits\",\"unit\":\"μBTC\",\"value\":1000000.0,\"type\":\"crypto\"},\"sats\":{\"name\":\"Satoshi\",\"unit\":\"sats\",\"value\":100000000.0,\"type\":\"crypto\"}}}'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange_rates.text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7989384-96c7-4cda-a1c3-4fac2d91f68e",
   "metadata": {},
   "outputs": [],
   "source": [
    "exchange_rates=exchange_rates.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d8759d29-a0d0-493c-8fab-5ddd25a329be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'rates': {'btc': {'name': 'Bitcoin',\n",
       "   'unit': 'BTC',\n",
       "   'value': 1.0,\n",
       "   'type': 'crypto'},\n",
       "  'eth': {'name': 'Ether', 'unit': 'ETH', 'value': 14.638, 'type': 'crypto'},\n",
       "  'ltc': {'name': 'Litecoin',\n",
       "   'unit': 'LTC',\n",
       "   'value': 342.074,\n",
       "   'type': 'crypto'},\n",
       "  'bch': {'name': 'Bitcoin Cash',\n",
       "   'unit': 'BCH',\n",
       "   'value': 125.8,\n",
       "   'type': 'crypto'},\n",
       "  'bnb': {'name': 'Binance Coin',\n",
       "   'unit': 'BNB',\n",
       "   'value': 98.125,\n",
       "   'type': 'crypto'},\n",
       "  'eos': {'name': 'EOS', 'unit': 'EOS', 'value': 16597.485, 'type': 'crypto'},\n",
       "  'xrp': {'name': 'XRP', 'unit': 'XRP', 'value': 60234.093, 'type': 'crypto'},\n",
       "  'xlm': {'name': 'Lumens',\n",
       "   'unit': 'XLM',\n",
       "   'value': 189154.769,\n",
       "   'type': 'crypto'},\n",
       "  'link': {'name': 'Chainlink',\n",
       "   'unit': 'LINK',\n",
       "   'value': 2415.525,\n",
       "   'type': 'crypto'},\n",
       "  'dot': {'name': 'Polkadot',\n",
       "   'unit': 'DOT',\n",
       "   'value': 2023.816,\n",
       "   'type': 'crypto'},\n",
       "  'yfi': {'name': 'Yearn.finance',\n",
       "   'unit': 'YFI',\n",
       "   'value': 1.527,\n",
       "   'type': 'crypto'},\n",
       "  'usd': {'name': 'US Dollar',\n",
       "   'unit': '$',\n",
       "   'value': 38115.811,\n",
       "   'type': 'fiat'},\n",
       "  'aed': {'name': 'United Arab Emirates Dirham',\n",
       "   'unit': 'DH',\n",
       "   'value': 139999.374,\n",
       "   'type': 'fiat'},\n",
       "  'ars': {'name': 'Argentine Peso',\n",
       "   'unit': '$',\n",
       "   'value': 3989854.103,\n",
       "   'type': 'fiat'},\n",
       "  'aud': {'name': 'Australian Dollar',\n",
       "   'unit': 'A$',\n",
       "   'value': 53172.052,\n",
       "   'type': 'fiat'},\n",
       "  'bdt': {'name': 'Bangladeshi Taka',\n",
       "   'unit': '৳',\n",
       "   'value': 3277066.594,\n",
       "   'type': 'fiat'},\n",
       "  'bhd': {'name': 'Bahraini Dinar',\n",
       "   'unit': 'BD',\n",
       "   'value': 14367.03,\n",
       "   'type': 'fiat'},\n",
       "  'bmd': {'name': 'Bermudian Dollar',\n",
       "   'unit': '$',\n",
       "   'value': 38115.811,\n",
       "   'type': 'fiat'},\n",
       "  'brl': {'name': 'Brazil Real',\n",
       "   'unit': 'R$',\n",
       "   'value': 206574.356,\n",
       "   'type': 'fiat'},\n",
       "  'cad': {'name': 'Canadian Dollar',\n",
       "   'unit': 'CA$',\n",
       "   'value': 47989.826,\n",
       "   'type': 'fiat'},\n",
       "  'chf': {'name': 'Swiss Franc',\n",
       "   'unit': 'Fr.',\n",
       "   'value': 35108.931,\n",
       "   'type': 'fiat'},\n",
       "  'clp': {'name': 'Chilean Peso',\n",
       "   'unit': 'CLP$',\n",
       "   'value': 30526190.863,\n",
       "   'type': 'fiat'},\n",
       "  'cny': {'name': 'Chinese Yuan',\n",
       "   'unit': '¥',\n",
       "   'value': 240933.854,\n",
       "   'type': 'fiat'},\n",
       "  'czk': {'name': 'Czech Koruna',\n",
       "   'unit': 'Kč',\n",
       "   'value': 827097.856,\n",
       "   'type': 'fiat'},\n",
       "  'dkk': {'name': 'Danish Krone',\n",
       "   'unit': 'kr.',\n",
       "   'value': 251310.883,\n",
       "   'type': 'fiat'},\n",
       "  'eur': {'name': 'Euro', 'unit': '€', 'value': 33769.541, 'type': 'fiat'},\n",
       "  'gbp': {'name': 'British Pound Sterling',\n",
       "   'unit': '£',\n",
       "   'value': 28193.884,\n",
       "   'type': 'fiat'},\n",
       "  'hkd': {'name': 'Hong Kong Dollar',\n",
       "   'unit': 'HK$',\n",
       "   'value': 296727.969,\n",
       "   'type': 'fiat'},\n",
       "  'huf': {'name': 'Hungarian Forint',\n",
       "   'unit': 'Ft',\n",
       "   'value': 12153622.42,\n",
       "   'type': 'fiat'},\n",
       "  'idr': {'name': 'Indonesian Rupiah',\n",
       "   'unit': 'Rp',\n",
       "   'value': 546345941.35,\n",
       "   'type': 'fiat'},\n",
       "  'ils': {'name': 'Israeli New Shekel',\n",
       "   'unit': '₪',\n",
       "   'value': 121121.375,\n",
       "   'type': 'fiat'},\n",
       "  'inr': {'name': 'Indian Rupee',\n",
       "   'unit': '₹',\n",
       "   'value': 2853772.558,\n",
       "   'type': 'fiat'},\n",
       "  'jpy': {'name': 'Japanese Yen',\n",
       "   'unit': '¥',\n",
       "   'value': 4358714.53,\n",
       "   'type': 'fiat'},\n",
       "  'krw': {'name': 'South Korean Won',\n",
       "   'unit': '₩',\n",
       "   'value': 45597353.746,\n",
       "   'type': 'fiat'},\n",
       "  'kwd': {'name': 'Kuwaiti Dinar',\n",
       "   'unit': 'KD',\n",
       "   'value': 11528.05,\n",
       "   'type': 'fiat'},\n",
       "  'lkr': {'name': 'Sri Lankan Rupee',\n",
       "   'unit': 'Rs',\n",
       "   'value': 7732881.382,\n",
       "   'type': 'fiat'},\n",
       "  'mmk': {'name': 'Burmese Kyat',\n",
       "   'unit': 'K',\n",
       "   'value': 67770961.733,\n",
       "   'type': 'fiat'},\n",
       "  'mxn': {'name': 'Mexican Peso',\n",
       "   'unit': 'MX$',\n",
       "   'value': 787369.441,\n",
       "   'type': 'fiat'},\n",
       "  'myr': {'name': 'Malaysian Ringgit',\n",
       "   'unit': 'RM',\n",
       "   'value': 159705.248,\n",
       "   'type': 'fiat'},\n",
       "  'ngn': {'name': 'Nigerian Naira',\n",
       "   'unit': '₦',\n",
       "   'value': 15830258.702,\n",
       "   'type': 'fiat'},\n",
       "  'nok': {'name': 'Norwegian Krone',\n",
       "   'unit': 'kr',\n",
       "   'value': 338199.077,\n",
       "   'type': 'fiat'},\n",
       "  'nzd': {'name': 'New Zealand Dollar',\n",
       "   'unit': 'NZ$',\n",
       "   'value': 56977.306,\n",
       "   'type': 'fiat'},\n",
       "  'php': {'name': 'Philippine Peso',\n",
       "   'unit': '₱',\n",
       "   'value': 1949032.87,\n",
       "   'type': 'fiat'},\n",
       "  'pkr': {'name': 'Pakistani Rupee',\n",
       "   'unit': '₨',\n",
       "   'value': 6727440.674,\n",
       "   'type': 'fiat'},\n",
       "  'pln': {'name': 'Polish Zloty',\n",
       "   'unit': 'zł',\n",
       "   'value': 154735.48,\n",
       "   'type': 'fiat'},\n",
       "  'rub': {'name': 'Russian Ruble',\n",
       "   'unit': '₽',\n",
       "   'value': 3034459.951,\n",
       "   'type': 'fiat'},\n",
       "  'sar': {'name': 'Saudi Riyal',\n",
       "   'unit': 'SR',\n",
       "   'value': 142982.66,\n",
       "   'type': 'fiat'},\n",
       "  'sek': {'name': 'Swedish Krona',\n",
       "   'unit': 'kr',\n",
       "   'value': 352617.068,\n",
       "   'type': 'fiat'},\n",
       "  'sgd': {'name': 'Singapore Dollar',\n",
       "   'unit': 'S$',\n",
       "   'value': 51253.302,\n",
       "   'type': 'fiat'},\n",
       "  'thb': {'name': 'Thai Baht',\n",
       "   'unit': '฿',\n",
       "   'value': 1258319.371,\n",
       "   'type': 'fiat'},\n",
       "  'try': {'name': 'Turkish Lira',\n",
       "   'unit': '₺',\n",
       "   'value': 517791.86,\n",
       "   'type': 'fiat'},\n",
       "  'twd': {'name': 'New Taiwan Dollar',\n",
       "   'unit': 'NT$',\n",
       "   'value': 1058285.459,\n",
       "   'type': 'fiat'},\n",
       "  'uah': {'name': 'Ukrainian hryvnia',\n",
       "   'unit': '₴',\n",
       "   'value': 1097325.579,\n",
       "   'type': 'fiat'},\n",
       "  'vef': {'name': 'Venezuelan bolívar fuerte',\n",
       "   'unit': 'Bs.F',\n",
       "   'value': 3816.536,\n",
       "   'type': 'fiat'},\n",
       "  'vnd': {'name': 'Vietnamese đồng',\n",
       "   'unit': '₫',\n",
       "   'value': 862739093.26,\n",
       "   'type': 'fiat'},\n",
       "  'zar': {'name': 'South African Rand',\n",
       "   'unit': 'R',\n",
       "   'value': 578572.59,\n",
       "   'type': 'fiat'},\n",
       "  'xdr': {'name': 'IMF Special Drawing Rights',\n",
       "   'unit': 'XDR',\n",
       "   'value': 27128.547,\n",
       "   'type': 'fiat'},\n",
       "  'xag': {'name': 'Silver - Troy Ounce',\n",
       "   'unit': 'XAG',\n",
       "   'value': 1603.797,\n",
       "   'type': 'commodity'},\n",
       "  'xau': {'name': 'Gold - Troy Ounce',\n",
       "   'unit': 'XAU',\n",
       "   'value': 20.828,\n",
       "   'type': 'commodity'},\n",
       "  'bits': {'name': 'Bits',\n",
       "   'unit': 'μBTC',\n",
       "   'value': 1000000.0,\n",
       "   'type': 'crypto'},\n",
       "  'sats': {'name': 'Satoshi',\n",
       "   'unit': 'sats',\n",
       "   'value': 100000000.0,\n",
       "   'type': 'crypto'}}}"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbc4d818-439d-4acd-b077-18d35d6c281a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas & numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e261850-e227-4e1a-ad58-e5d7ef513b45",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pb\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8319d09f-d7c4-4c26-a845-4629f6f46d97",
   "metadata": {},
   "outputs": [],
   "source": [
    "Importing csv file through pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f07bbb73-d565-4e67-bb35-3825fba8f5a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\bmcpadden\\\\First Folder\\\\Project - Barry McPadden'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a7fcae36-420c-475b-8a20-205b3657a226",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "087e6f0e-2f99-4a00-9311-8345334d445b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:116: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  lwidth -= np.array([self.adj.len(x) for x in idx]).max() + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:190: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  w_adjoined = w + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:191: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  curr_width += w_adjoined\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:195: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 2 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:193: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 1 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>USD</th>\n",
       "      <th>JPY</th>\n",
       "      <th>BGN</th>\n",
       "      <th>CZK</th>\n",
       "      <th>DKK</th>\n",
       "      <th>EEK</th>\n",
       "      <th>ILS</th>\n",
       "      <th>GBP</th>\n",
       "      <th>HUF</th>\n",
       "      <th>...</th>\n",
       "      <th>IDR</th>\n",
       "      <th>INR</th>\n",
       "      <th>KRW</th>\n",
       "      <th>MXN</th>\n",
       "      <th>MYR</th>\n",
       "      <th>NZD</th>\n",
       "      <th>PHP</th>\n",
       "      <th>SGD</th>\n",
       "      <th>THB</th>\n",
       "      <th>ZAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4 Jan 16</td>\n",
       "      <td>1.0898</td>\n",
       "      <td>129.78</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4620</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2659</td>\n",
       "      <td>0.73810</td>\n",
       "      <td>315.39</td>\n",
       "      <td>...</td>\n",
       "      <td>15194.63</td>\n",
       "      <td>72.6170</td>\n",
       "      <td>1297.87</td>\n",
       "      <td>18.9353</td>\n",
       "      <td>4.7363</td>\n",
       "      <td>1.6146</td>\n",
       "      <td>51.393</td>\n",
       "      <td>1.5533</td>\n",
       "      <td>39.407</td>\n",
       "      <td>16.9558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5 Jan 16</td>\n",
       "      <td>1.0746</td>\n",
       "      <td>127.88</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4605</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2144</td>\n",
       "      <td>0.73235</td>\n",
       "      <td>315.20</td>\n",
       "      <td>...</td>\n",
       "      <td>14879.48</td>\n",
       "      <td>71.5539</td>\n",
       "      <td>1277.02</td>\n",
       "      <td>18.5798</td>\n",
       "      <td>4.6670</td>\n",
       "      <td>1.6001</td>\n",
       "      <td>50.371</td>\n",
       "      <td>1.5310</td>\n",
       "      <td>38.816</td>\n",
       "      <td>16.7643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6 Jan 16</td>\n",
       "      <td>1.0742</td>\n",
       "      <td>127.19</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2389</td>\n",
       "      <td>0.73440</td>\n",
       "      <td>314.81</td>\n",
       "      <td>...</td>\n",
       "      <td>14988.90</td>\n",
       "      <td>71.8242</td>\n",
       "      <td>1289.20</td>\n",
       "      <td>18.7480</td>\n",
       "      <td>4.7388</td>\n",
       "      <td>1.6166</td>\n",
       "      <td>50.588</td>\n",
       "      <td>1.5409</td>\n",
       "      <td>38.917</td>\n",
       "      <td>17.0032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7 Jan 16</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>127.74</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.030</td>\n",
       "      <td>7.4596</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2700</td>\n",
       "      <td>0.74545</td>\n",
       "      <td>315.79</td>\n",
       "      <td>...</td>\n",
       "      <td>15139.18</td>\n",
       "      <td>72.7012</td>\n",
       "      <td>1306.87</td>\n",
       "      <td>19.2176</td>\n",
       "      <td>4.7904</td>\n",
       "      <td>1.6464</td>\n",
       "      <td>51.226</td>\n",
       "      <td>1.5612</td>\n",
       "      <td>39.442</td>\n",
       "      <td>17.4987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8 Jan 16</td>\n",
       "      <td>1.0861</td>\n",
       "      <td>128.51</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4598</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2597</td>\n",
       "      <td>0.74519</td>\n",
       "      <td>315.53</td>\n",
       "      <td>...</td>\n",
       "      <td>15111.30</td>\n",
       "      <td>72.4206</td>\n",
       "      <td>1304.78</td>\n",
       "      <td>19.3231</td>\n",
       "      <td>4.7615</td>\n",
       "      <td>1.6450</td>\n",
       "      <td>51.204</td>\n",
       "      <td>1.5606</td>\n",
       "      <td>39.387</td>\n",
       "      <td>17.3870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>11 Jan 16</td>\n",
       "      <td>1.0888</td>\n",
       "      <td>128.33</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2827</td>\n",
       "      <td>0.74705</td>\n",
       "      <td>317.32</td>\n",
       "      <td>...</td>\n",
       "      <td>15076.42</td>\n",
       "      <td>72.7413</td>\n",
       "      <td>1309.12</td>\n",
       "      <td>19.4182</td>\n",
       "      <td>4.7655</td>\n",
       "      <td>1.6577</td>\n",
       "      <td>51.326</td>\n",
       "      <td>1.5607</td>\n",
       "      <td>39.491</td>\n",
       "      <td>18.0474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>12 Jan 16</td>\n",
       "      <td>1.0836</td>\n",
       "      <td>127.79</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4612</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2711</td>\n",
       "      <td>0.75080</td>\n",
       "      <td>317.75</td>\n",
       "      <td>...</td>\n",
       "      <td>14965.60</td>\n",
       "      <td>72.4603</td>\n",
       "      <td>1308.87</td>\n",
       "      <td>19.2772</td>\n",
       "      <td>4.7830</td>\n",
       "      <td>1.6547</td>\n",
       "      <td>51.296</td>\n",
       "      <td>1.5570</td>\n",
       "      <td>39.368</td>\n",
       "      <td>17.9737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>13 Jan 16</td>\n",
       "      <td>1.0816</td>\n",
       "      <td>127.74</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4614</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2635</td>\n",
       "      <td>0.75020</td>\n",
       "      <td>315.43</td>\n",
       "      <td>...</td>\n",
       "      <td>14947.98</td>\n",
       "      <td>72.3212</td>\n",
       "      <td>1301.18</td>\n",
       "      <td>19.2779</td>\n",
       "      <td>4.7382</td>\n",
       "      <td>1.6519</td>\n",
       "      <td>51.283</td>\n",
       "      <td>1.5492</td>\n",
       "      <td>39.203</td>\n",
       "      <td>17.8353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14 Jan 16</td>\n",
       "      <td>1.0893</td>\n",
       "      <td>128.26</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2986</td>\n",
       "      <td>0.75703</td>\n",
       "      <td>315.97</td>\n",
       "      <td>...</td>\n",
       "      <td>15155.06</td>\n",
       "      <td>73.4516</td>\n",
       "      <td>1320.77</td>\n",
       "      <td>19.5529</td>\n",
       "      <td>4.7855</td>\n",
       "      <td>1.6903</td>\n",
       "      <td>52.076</td>\n",
       "      <td>1.5670</td>\n",
       "      <td>39.552</td>\n",
       "      <td>18.0475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>15 Jan 16</td>\n",
       "      <td>1.0914</td>\n",
       "      <td>127.80</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3125</td>\n",
       "      <td>0.76150</td>\n",
       "      <td>314.35</td>\n",
       "      <td>...</td>\n",
       "      <td>15268.11</td>\n",
       "      <td>73.9860</td>\n",
       "      <td>1328.97</td>\n",
       "      <td>19.7876</td>\n",
       "      <td>4.8281</td>\n",
       "      <td>1.7103</td>\n",
       "      <td>52.281</td>\n",
       "      <td>1.5735</td>\n",
       "      <td>39.705</td>\n",
       "      <td>18.2254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>18 Jan 16</td>\n",
       "      <td>1.0892</td>\n",
       "      <td>127.78</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.037</td>\n",
       "      <td>7.4633</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3090</td>\n",
       "      <td>0.76263</td>\n",
       "      <td>315.42</td>\n",
       "      <td>...</td>\n",
       "      <td>15163.45</td>\n",
       "      <td>73.7266</td>\n",
       "      <td>1317.44</td>\n",
       "      <td>19.8703</td>\n",
       "      <td>4.7887</td>\n",
       "      <td>1.6862</td>\n",
       "      <td>52.036</td>\n",
       "      <td>1.5674</td>\n",
       "      <td>39.516</td>\n",
       "      <td>18.2882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>19 Jan 16</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>128.12</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3025</td>\n",
       "      <td>0.76473</td>\n",
       "      <td>314.56</td>\n",
       "      <td>...</td>\n",
       "      <td>15009.55</td>\n",
       "      <td>73.4840</td>\n",
       "      <td>1306.89</td>\n",
       "      <td>19.6912</td>\n",
       "      <td>4.7530</td>\n",
       "      <td>1.6763</td>\n",
       "      <td>51.740</td>\n",
       "      <td>1.5592</td>\n",
       "      <td>39.428</td>\n",
       "      <td>18.1115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>20 Jan 16</td>\n",
       "      <td>1.0907</td>\n",
       "      <td>127.28</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.042</td>\n",
       "      <td>7.4638</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3360</td>\n",
       "      <td>0.77000</td>\n",
       "      <td>314.76</td>\n",
       "      <td>...</td>\n",
       "      <td>15228.20</td>\n",
       "      <td>74.1627</td>\n",
       "      <td>1326.46</td>\n",
       "      <td>20.0427</td>\n",
       "      <td>4.7936</td>\n",
       "      <td>1.7134</td>\n",
       "      <td>52.219</td>\n",
       "      <td>1.5697</td>\n",
       "      <td>39.582</td>\n",
       "      <td>18.2896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>21 Jan 16</td>\n",
       "      <td>1.0893</td>\n",
       "      <td>127.43</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.064</td>\n",
       "      <td>7.4630</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3277</td>\n",
       "      <td>0.77182</td>\n",
       "      <td>314.42</td>\n",
       "      <td>...</td>\n",
       "      <td>15149.99</td>\n",
       "      <td>74.0684</td>\n",
       "      <td>1321.64</td>\n",
       "      <td>20.2120</td>\n",
       "      <td>4.7818</td>\n",
       "      <td>1.6940</td>\n",
       "      <td>52.166</td>\n",
       "      <td>1.5670</td>\n",
       "      <td>39.503</td>\n",
       "      <td>18.1453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22 Jan 16</td>\n",
       "      <td>1.0808</td>\n",
       "      <td>127.77</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2945</td>\n",
       "      <td>0.75459</td>\n",
       "      <td>312.20</td>\n",
       "      <td>...</td>\n",
       "      <td>14952.60</td>\n",
       "      <td>73.0945</td>\n",
       "      <td>1292.83</td>\n",
       "      <td>20.0160</td>\n",
       "      <td>4.6308</td>\n",
       "      <td>1.6606</td>\n",
       "      <td>51.580</td>\n",
       "      <td>1.5421</td>\n",
       "      <td>38.921</td>\n",
       "      <td>17.8143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>25 Jan 16</td>\n",
       "      <td>1.0815</td>\n",
       "      <td>128.07</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3031</td>\n",
       "      <td>0.75890</td>\n",
       "      <td>312.70</td>\n",
       "      <td>...</td>\n",
       "      <td>14985.15</td>\n",
       "      <td>73.2973</td>\n",
       "      <td>1293.53</td>\n",
       "      <td>19.9970</td>\n",
       "      <td>4.6208</td>\n",
       "      <td>1.6728</td>\n",
       "      <td>51.890</td>\n",
       "      <td>1.5469</td>\n",
       "      <td>38.869</td>\n",
       "      <td>17.8580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>26 Jan 16</td>\n",
       "      <td>1.0837</td>\n",
       "      <td>128.22</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4622</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3084</td>\n",
       "      <td>0.76095</td>\n",
       "      <td>312.73</td>\n",
       "      <td>...</td>\n",
       "      <td>15004.76</td>\n",
       "      <td>73.5797</td>\n",
       "      <td>1303.82</td>\n",
       "      <td>20.1259</td>\n",
       "      <td>4.6335</td>\n",
       "      <td>1.6777</td>\n",
       "      <td>52.051</td>\n",
       "      <td>1.5498</td>\n",
       "      <td>38.865</td>\n",
       "      <td>17.8881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>27 Jan 16</td>\n",
       "      <td>1.0888</td>\n",
       "      <td>128.91</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.025</td>\n",
       "      <td>7.4625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3252</td>\n",
       "      <td>0.75965</td>\n",
       "      <td>313.85</td>\n",
       "      <td>...</td>\n",
       "      <td>15090.93</td>\n",
       "      <td>74.0928</td>\n",
       "      <td>1308.94</td>\n",
       "      <td>20.0040</td>\n",
       "      <td>4.6203</td>\n",
       "      <td>1.6739</td>\n",
       "      <td>52.162</td>\n",
       "      <td>1.5542</td>\n",
       "      <td>38.963</td>\n",
       "      <td>17.7803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>28 Jan 16</td>\n",
       "      <td>1.0903</td>\n",
       "      <td>129.62</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4626</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3130</td>\n",
       "      <td>0.76228</td>\n",
       "      <td>313.37</td>\n",
       "      <td>...</td>\n",
       "      <td>15116.22</td>\n",
       "      <td>74.3857</td>\n",
       "      <td>1316.36</td>\n",
       "      <td>19.9966</td>\n",
       "      <td>4.5772</td>\n",
       "      <td>1.6874</td>\n",
       "      <td>52.116</td>\n",
       "      <td>1.5556</td>\n",
       "      <td>39.067</td>\n",
       "      <td>17.7785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>29 Jan 16</td>\n",
       "      <td>1.0920</td>\n",
       "      <td>132.25</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3084</td>\n",
       "      <td>0.76410</td>\n",
       "      <td>312.03</td>\n",
       "      <td>...</td>\n",
       "      <td>14967.64</td>\n",
       "      <td>74.1039</td>\n",
       "      <td>1318.60</td>\n",
       "      <td>20.0054</td>\n",
       "      <td>4.5296</td>\n",
       "      <td>1.6788</td>\n",
       "      <td>52.082</td>\n",
       "      <td>1.5550</td>\n",
       "      <td>38.973</td>\n",
       "      <td>17.4927</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0     USD     JPY     BGN     CZK     DKK  EEK     ILS      GBP  \\\n",
       "0    4 Jan 16  1.0898  129.78  1.9558  27.023  7.4620  NaN  4.2659  0.73810   \n",
       "1    5 Jan 16  1.0746  127.88  1.9558  27.022  7.4605  NaN  4.2144  0.73235   \n",
       "2    6 Jan 16  1.0742  127.19  1.9558  27.026  7.4603  NaN  4.2389  0.73440   \n",
       "3    7 Jan 16  1.0868  127.74  1.9558  27.030  7.4596  NaN  4.2700  0.74545   \n",
       "4    8 Jan 16  1.0861  128.51  1.9558  27.022  7.4598  NaN  4.2597  0.74519   \n",
       "5   11 Jan 16  1.0888  128.33  1.9558  27.021  7.4603  NaN  4.2827  0.74705   \n",
       "6   12 Jan 16  1.0836  127.79  1.9558  27.021  7.4612  NaN  4.2711  0.75080   \n",
       "7   13 Jan 16  1.0816  127.74  1.9558  27.021  7.4614  NaN  4.2635  0.75020   \n",
       "8   14 Jan 16  1.0893  128.26  1.9558  27.021  7.4624  NaN  4.2986  0.75703   \n",
       "9   15 Jan 16  1.0914  127.80  1.9558  27.021  7.4631  NaN  4.3125  0.76150   \n",
       "10  18 Jan 16  1.0892  127.78  1.9558  27.037  7.4633  NaN  4.3090  0.76263   \n",
       "11  19 Jan 16  1.0868  128.12  1.9558  27.023  7.4628  NaN  4.3025  0.76473   \n",
       "12  20 Jan 16  1.0907  127.28  1.9558  27.042  7.4638  NaN  4.3360  0.77000   \n",
       "13  21 Jan 16  1.0893  127.43  1.9558  27.064  7.4630  NaN  4.3277  0.77182   \n",
       "14  22 Jan 16  1.0808  127.77  1.9558  27.026  7.4621  NaN  4.2945  0.75459   \n",
       "15  25 Jan 16  1.0815  128.07  1.9558  27.021  7.4624  NaN  4.3031  0.75890   \n",
       "16  26 Jan 16  1.0837  128.22  1.9558  27.021  7.4622  NaN  4.3084  0.76095   \n",
       "17  27 Jan 16  1.0888  128.91  1.9558  27.025  7.4625  NaN  4.3252  0.75965   \n",
       "18  28 Jan 16  1.0903  129.62  1.9558  27.021  7.4626  NaN  4.3130  0.76228   \n",
       "19  29 Jan 16  1.0920  132.25  1.9558  27.026  7.4628  NaN  4.3084  0.76410   \n",
       "\n",
       "       HUF  ...       IDR      INR      KRW      MXN     MYR     NZD     PHP  \\\n",
       "0   315.39  ...  15194.63  72.6170  1297.87  18.9353  4.7363  1.6146  51.393   \n",
       "1   315.20  ...  14879.48  71.5539  1277.02  18.5798  4.6670  1.6001  50.371   \n",
       "2   314.81  ...  14988.90  71.8242  1289.20  18.7480  4.7388  1.6166  50.588   \n",
       "3   315.79  ...  15139.18  72.7012  1306.87  19.2176  4.7904  1.6464  51.226   \n",
       "4   315.53  ...  15111.30  72.4206  1304.78  19.3231  4.7615  1.6450  51.204   \n",
       "5   317.32  ...  15076.42  72.7413  1309.12  19.4182  4.7655  1.6577  51.326   \n",
       "6   317.75  ...  14965.60  72.4603  1308.87  19.2772  4.7830  1.6547  51.296   \n",
       "7   315.43  ...  14947.98  72.3212  1301.18  19.2779  4.7382  1.6519  51.283   \n",
       "8   315.97  ...  15155.06  73.4516  1320.77  19.5529  4.7855  1.6903  52.076   \n",
       "9   314.35  ...  15268.11  73.9860  1328.97  19.7876  4.8281  1.7103  52.281   \n",
       "10  315.42  ...  15163.45  73.7266  1317.44  19.8703  4.7887  1.6862  52.036   \n",
       "11  314.56  ...  15009.55  73.4840  1306.89  19.6912  4.7530  1.6763  51.740   \n",
       "12  314.76  ...  15228.20  74.1627  1326.46  20.0427  4.7936  1.7134  52.219   \n",
       "13  314.42  ...  15149.99  74.0684  1321.64  20.2120  4.7818  1.6940  52.166   \n",
       "14  312.20  ...  14952.60  73.0945  1292.83  20.0160  4.6308  1.6606  51.580   \n",
       "15  312.70  ...  14985.15  73.2973  1293.53  19.9970  4.6208  1.6728  51.890   \n",
       "16  312.73  ...  15004.76  73.5797  1303.82  20.1259  4.6335  1.6777  52.051   \n",
       "17  313.85  ...  15090.93  74.0928  1308.94  20.0040  4.6203  1.6739  52.162   \n",
       "18  313.37  ...  15116.22  74.3857  1316.36  19.9966  4.5772  1.6874  52.116   \n",
       "19  312.03  ...  14967.64  74.1039  1318.60  20.0054  4.5296  1.6788  52.082   \n",
       "\n",
       "       SGD     THB      ZAR  \n",
       "0   1.5533  39.407  16.9558  \n",
       "1   1.5310  38.816  16.7643  \n",
       "2   1.5409  38.917  17.0032  \n",
       "3   1.5612  39.442  17.4987  \n",
       "4   1.5606  39.387  17.3870  \n",
       "5   1.5607  39.491  18.0474  \n",
       "6   1.5570  39.368  17.9737  \n",
       "7   1.5492  39.203  17.8353  \n",
       "8   1.5670  39.552  18.0475  \n",
       "9   1.5735  39.705  18.2254  \n",
       "10  1.5674  39.516  18.2882  \n",
       "11  1.5592  39.428  18.1115  \n",
       "12  1.5697  39.582  18.2896  \n",
       "13  1.5670  39.503  18.1453  \n",
       "14  1.5421  38.921  17.8143  \n",
       "15  1.5469  38.869  17.8580  \n",
       "16  1.5498  38.865  17.8881  \n",
       "17  1.5542  38.963  17.7803  \n",
       "18  1.5556  39.067  17.7785  \n",
       "19  1.5550  38.973  17.4927  \n",
       "\n",
       "[20 rows x 37 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pb.read_csv('Fx Rates.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "5c8e7d17-ed1b-494f-913e-fbf13a79073e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\parsers.py:2061: RuntimeWarning: divide by zero encountered in equal\n",
      "  data = self._reader.read(nrows)\n"
     ]
    }
   ],
   "source": [
    "df=pb.read_csv('Fx Rates.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2773fa11-c536-4f58-9b1b-fbab67511b73",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import loadtxt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "570fdd7a-9489-4055-9c30-5badab0246ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "filename='Fx Rates.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "49f1db3a-9bc9-4ead-ba2c-29c76ff56384",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_data=open(filename,'rb')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f5c8fe6d-8c78-457c-a9ac-1cd644ddf19d",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-39-a3618f5ed75d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mloadtxt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mraw_data\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdelimiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\",\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\lib\\npyio.py\u001b[0m in \u001b[0;36mloadtxt\u001b[1;34m(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)\u001b[0m\n\u001b[0;32m   1137\u001b[0m         \u001b[1;31m# converting the data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1138\u001b[0m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1139\u001b[1;33m         \u001b[1;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mread_data\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_loadtxt_chunksize\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1140\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mX\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1141\u001b[0m                 \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\lib\\npyio.py\u001b[0m in \u001b[0;36mread_data\u001b[1;34m(chunk_size)\u001b[0m\n\u001b[0;32m   1065\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1066\u001b[0m             \u001b[1;31m# Convert each value according to its column and store\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1067\u001b[1;33m             \u001b[0mitems\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mconv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mval\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mval\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconverters\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvals\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1068\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1069\u001b[0m             \u001b[1;31m# Then pack it according to the dtype's nesting\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\lib\\npyio.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m   1065\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1066\u001b[0m             \u001b[1;31m# Convert each value according to its column and store\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1067\u001b[1;33m             \u001b[0mitems\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mconv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mval\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mval\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconverters\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvals\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1068\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1069\u001b[0m             \u001b[1;31m# Then pack it according to the dtype's nesting\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\lib\\npyio.py\u001b[0m in \u001b[0;36mfloatconv\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m    761\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;34m'0x'\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    762\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfromhex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 763\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    764\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    765\u001b[0m     \u001b[0mtyp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: ''"
     ]
    }
   ],
   "source": [
    "data=loadtxt(raw_data,delimiter=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "34243795-6780-4b42-9c7f-39111d0de41d",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'data' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-40-b5f01a7c0d9a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'data' is not defined"
     ]
    }
   ],
   "source": [
    "type(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb07949c-7b12-40f6-86a6-7082ae9e89a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "Sorting, indexing & grouping data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "99115462-a7bf-4f72-9710-c9bfc2e2d9e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'rates': {'btc': {'name': 'Bitcoin',\n",
       "   'unit': 'BTC',\n",
       "   'value': 1.0,\n",
       "   'type': 'crypto'},\n",
       "  'eth': {'name': 'Ether', 'unit': 'ETH', 'value': 14.638, 'type': 'crypto'},\n",
       "  'ltc': {'name': 'Litecoin',\n",
       "   'unit': 'LTC',\n",
       "   'value': 342.074,\n",
       "   'type': 'crypto'},\n",
       "  'bch': {'name': 'Bitcoin Cash',\n",
       "   'unit': 'BCH',\n",
       "   'value': 125.8,\n",
       "   'type': 'crypto'},\n",
       "  'bnb': {'name': 'Binance Coin',\n",
       "   'unit': 'BNB',\n",
       "   'value': 98.125,\n",
       "   'type': 'crypto'},\n",
       "  'eos': {'name': 'EOS', 'unit': 'EOS', 'value': 16597.485, 'type': 'crypto'},\n",
       "  'xrp': {'name': 'XRP', 'unit': 'XRP', 'value': 60234.093, 'type': 'crypto'},\n",
       "  'xlm': {'name': 'Lumens',\n",
       "   'unit': 'XLM',\n",
       "   'value': 189154.769,\n",
       "   'type': 'crypto'},\n",
       "  'link': {'name': 'Chainlink',\n",
       "   'unit': 'LINK',\n",
       "   'value': 2415.525,\n",
       "   'type': 'crypto'},\n",
       "  'dot': {'name': 'Polkadot',\n",
       "   'unit': 'DOT',\n",
       "   'value': 2023.816,\n",
       "   'type': 'crypto'},\n",
       "  'yfi': {'name': 'Yearn.finance',\n",
       "   'unit': 'YFI',\n",
       "   'value': 1.527,\n",
       "   'type': 'crypto'},\n",
       "  'usd': {'name': 'US Dollar',\n",
       "   'unit': '$',\n",
       "   'value': 38115.811,\n",
       "   'type': 'fiat'},\n",
       "  'aed': {'name': 'United Arab Emirates Dirham',\n",
       "   'unit': 'DH',\n",
       "   'value': 139999.374,\n",
       "   'type': 'fiat'},\n",
       "  'ars': {'name': 'Argentine Peso',\n",
       "   'unit': '$',\n",
       "   'value': 3989854.103,\n",
       "   'type': 'fiat'},\n",
       "  'aud': {'name': 'Australian Dollar',\n",
       "   'unit': 'A$',\n",
       "   'value': 53172.052,\n",
       "   'type': 'fiat'},\n",
       "  'bdt': {'name': 'Bangladeshi Taka',\n",
       "   'unit': '৳',\n",
       "   'value': 3277066.594,\n",
       "   'type': 'fiat'},\n",
       "  'bhd': {'name': 'Bahraini Dinar',\n",
       "   'unit': 'BD',\n",
       "   'value': 14367.03,\n",
       "   'type': 'fiat'},\n",
       "  'bmd': {'name': 'Bermudian Dollar',\n",
       "   'unit': '$',\n",
       "   'value': 38115.811,\n",
       "   'type': 'fiat'},\n",
       "  'brl': {'name': 'Brazil Real',\n",
       "   'unit': 'R$',\n",
       "   'value': 206574.356,\n",
       "   'type': 'fiat'},\n",
       "  'cad': {'name': 'Canadian Dollar',\n",
       "   'unit': 'CA$',\n",
       "   'value': 47989.826,\n",
       "   'type': 'fiat'},\n",
       "  'chf': {'name': 'Swiss Franc',\n",
       "   'unit': 'Fr.',\n",
       "   'value': 35108.931,\n",
       "   'type': 'fiat'},\n",
       "  'clp': {'name': 'Chilean Peso',\n",
       "   'unit': 'CLP$',\n",
       "   'value': 30526190.863,\n",
       "   'type': 'fiat'},\n",
       "  'cny': {'name': 'Chinese Yuan',\n",
       "   'unit': '¥',\n",
       "   'value': 240933.854,\n",
       "   'type': 'fiat'},\n",
       "  'czk': {'name': 'Czech Koruna',\n",
       "   'unit': 'Kč',\n",
       "   'value': 827097.856,\n",
       "   'type': 'fiat'},\n",
       "  'dkk': {'name': 'Danish Krone',\n",
       "   'unit': 'kr.',\n",
       "   'value': 251310.883,\n",
       "   'type': 'fiat'},\n",
       "  'eur': {'name': 'Euro', 'unit': '€', 'value': 33769.541, 'type': 'fiat'},\n",
       "  'gbp': {'name': 'British Pound Sterling',\n",
       "   'unit': '£',\n",
       "   'value': 28193.884,\n",
       "   'type': 'fiat'},\n",
       "  'hkd': {'name': 'Hong Kong Dollar',\n",
       "   'unit': 'HK$',\n",
       "   'value': 296727.969,\n",
       "   'type': 'fiat'},\n",
       "  'huf': {'name': 'Hungarian Forint',\n",
       "   'unit': 'Ft',\n",
       "   'value': 12153622.42,\n",
       "   'type': 'fiat'},\n",
       "  'idr': {'name': 'Indonesian Rupiah',\n",
       "   'unit': 'Rp',\n",
       "   'value': 546345941.35,\n",
       "   'type': 'fiat'},\n",
       "  'ils': {'name': 'Israeli New Shekel',\n",
       "   'unit': '₪',\n",
       "   'value': 121121.375,\n",
       "   'type': 'fiat'},\n",
       "  'inr': {'name': 'Indian Rupee',\n",
       "   'unit': '₹',\n",
       "   'value': 2853772.558,\n",
       "   'type': 'fiat'},\n",
       "  'jpy': {'name': 'Japanese Yen',\n",
       "   'unit': '¥',\n",
       "   'value': 4358714.53,\n",
       "   'type': 'fiat'},\n",
       "  'krw': {'name': 'South Korean Won',\n",
       "   'unit': '₩',\n",
       "   'value': 45597353.746,\n",
       "   'type': 'fiat'},\n",
       "  'kwd': {'name': 'Kuwaiti Dinar',\n",
       "   'unit': 'KD',\n",
       "   'value': 11528.05,\n",
       "   'type': 'fiat'},\n",
       "  'lkr': {'name': 'Sri Lankan Rupee',\n",
       "   'unit': 'Rs',\n",
       "   'value': 7732881.382,\n",
       "   'type': 'fiat'},\n",
       "  'mmk': {'name': 'Burmese Kyat',\n",
       "   'unit': 'K',\n",
       "   'value': 67770961.733,\n",
       "   'type': 'fiat'},\n",
       "  'mxn': {'name': 'Mexican Peso',\n",
       "   'unit': 'MX$',\n",
       "   'value': 787369.441,\n",
       "   'type': 'fiat'},\n",
       "  'myr': {'name': 'Malaysian Ringgit',\n",
       "   'unit': 'RM',\n",
       "   'value': 159705.248,\n",
       "   'type': 'fiat'},\n",
       "  'ngn': {'name': 'Nigerian Naira',\n",
       "   'unit': '₦',\n",
       "   'value': 15830258.702,\n",
       "   'type': 'fiat'},\n",
       "  'nok': {'name': 'Norwegian Krone',\n",
       "   'unit': 'kr',\n",
       "   'value': 338199.077,\n",
       "   'type': 'fiat'},\n",
       "  'nzd': {'name': 'New Zealand Dollar',\n",
       "   'unit': 'NZ$',\n",
       "   'value': 56977.306,\n",
       "   'type': 'fiat'},\n",
       "  'php': {'name': 'Philippine Peso',\n",
       "   'unit': '₱',\n",
       "   'value': 1949032.87,\n",
       "   'type': 'fiat'},\n",
       "  'pkr': {'name': 'Pakistani Rupee',\n",
       "   'unit': '₨',\n",
       "   'value': 6727440.674,\n",
       "   'type': 'fiat'},\n",
       "  'pln': {'name': 'Polish Zloty',\n",
       "   'unit': 'zł',\n",
       "   'value': 154735.48,\n",
       "   'type': 'fiat'},\n",
       "  'rub': {'name': 'Russian Ruble',\n",
       "   'unit': '₽',\n",
       "   'value': 3034459.951,\n",
       "   'type': 'fiat'},\n",
       "  'sar': {'name': 'Saudi Riyal',\n",
       "   'unit': 'SR',\n",
       "   'value': 142982.66,\n",
       "   'type': 'fiat'},\n",
       "  'sek': {'name': 'Swedish Krona',\n",
       "   'unit': 'kr',\n",
       "   'value': 352617.068,\n",
       "   'type': 'fiat'},\n",
       "  'sgd': {'name': 'Singapore Dollar',\n",
       "   'unit': 'S$',\n",
       "   'value': 51253.302,\n",
       "   'type': 'fiat'},\n",
       "  'thb': {'name': 'Thai Baht',\n",
       "   'unit': '฿',\n",
       "   'value': 1258319.371,\n",
       "   'type': 'fiat'},\n",
       "  'try': {'name': 'Turkish Lira',\n",
       "   'unit': '₺',\n",
       "   'value': 517791.86,\n",
       "   'type': 'fiat'},\n",
       "  'twd': {'name': 'New Taiwan Dollar',\n",
       "   'unit': 'NT$',\n",
       "   'value': 1058285.459,\n",
       "   'type': 'fiat'},\n",
       "  'uah': {'name': 'Ukrainian hryvnia',\n",
       "   'unit': '₴',\n",
       "   'value': 1097325.579,\n",
       "   'type': 'fiat'},\n",
       "  'vef': {'name': 'Venezuelan bolívar fuerte',\n",
       "   'unit': 'Bs.F',\n",
       "   'value': 3816.536,\n",
       "   'type': 'fiat'},\n",
       "  'vnd': {'name': 'Vietnamese đồng',\n",
       "   'unit': '₫',\n",
       "   'value': 862739093.26,\n",
       "   'type': 'fiat'},\n",
       "  'zar': {'name': 'South African Rand',\n",
       "   'unit': 'R',\n",
       "   'value': 578572.59,\n",
       "   'type': 'fiat'},\n",
       "  'xdr': {'name': 'IMF Special Drawing Rights',\n",
       "   'unit': 'XDR',\n",
       "   'value': 27128.547,\n",
       "   'type': 'fiat'},\n",
       "  'xag': {'name': 'Silver - Troy Ounce',\n",
       "   'unit': 'XAG',\n",
       "   'value': 1603.797,\n",
       "   'type': 'commodity'},\n",
       "  'xau': {'name': 'Gold - Troy Ounce',\n",
       "   'unit': 'XAU',\n",
       "   'value': 20.828,\n",
       "   'type': 'commodity'},\n",
       "  'bits': {'name': 'Bits',\n",
       "   'unit': 'μBTC',\n",
       "   'value': 1000000.0,\n",
       "   'type': 'crypto'},\n",
       "  'sats': {'name': 'Satoshi',\n",
       "   'unit': 'sats',\n",
       "   'value': 100000000.0,\n",
       "   'type': 'crypto'}}}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exchange_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "58a17349-458e-442e-af9c-a01d789c4fcb",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-70-bf5cbfccb792>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-70-bf5cbfccb792>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    Fx Rates =pb.read_csv('Fx Rates.csv')\u001b[0m\n\u001b[1;37m       ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Fx Rates =pb.read_csv('Fx Rates.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "599604cc-0b95-438e-bbf9-05a312526e16",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\sorting.py:373: RuntimeWarning: divide by zero encountered in invert\n",
      "  non_nans = items[~mask]\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\sorting.py:374: RuntimeWarning: divide by zero encountered in invert\n",
      "  non_nan_idx = idx[~mask]\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:258: RuntimeWarning: divide by zero encountered in less\n",
      "  mask = indices < 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:263: RuntimeWarning: divide by zero encountered in greater_equal\n",
      "  mask = (indices >= n) | (indices < 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:263: RuntimeWarning: divide by zero encountered in less\n",
      "  mask = (indices >= n) | (indices < 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:263: RuntimeWarning: divide by zero encountered in bitwise_or\n",
      "  mask = (indices >= n) | (indices < 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\numeric.py:2378: RuntimeWarning: divide by zero encountered in equal\n",
      "  return bool(asarray(a1 == a2).all())\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:57: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_all(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:116: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  lwidth -= np.array([self.adj.len(x) for x in idx]).max() + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:190: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  w_adjoined = w + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:191: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  curr_width += w_adjoined\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:195: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 2 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:193: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 1 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\numeric.py:2378: RuntimeWarning: divide by zero encountered in equal\n",
      "  return bool(asarray(a1 == a2).all())\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:57: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_all(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>USD</th>\n",
       "      <th>JPY</th>\n",
       "      <th>BGN</th>\n",
       "      <th>CZK</th>\n",
       "      <th>DKK</th>\n",
       "      <th>EEK</th>\n",
       "      <th>ILS</th>\n",
       "      <th>GBP</th>\n",
       "      <th>HUF</th>\n",
       "      <th>...</th>\n",
       "      <th>IDR</th>\n",
       "      <th>INR</th>\n",
       "      <th>KRW</th>\n",
       "      <th>MXN</th>\n",
       "      <th>MYR</th>\n",
       "      <th>NZD</th>\n",
       "      <th>PHP</th>\n",
       "      <th>SGD</th>\n",
       "      <th>THB</th>\n",
       "      <th>ZAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>29 Jan 16</td>\n",
       "      <td>1.0920</td>\n",
       "      <td>132.25</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3084</td>\n",
       "      <td>0.76410</td>\n",
       "      <td>312.03</td>\n",
       "      <td>...</td>\n",
       "      <td>14967.64</td>\n",
       "      <td>74.1039</td>\n",
       "      <td>1318.60</td>\n",
       "      <td>20.0054</td>\n",
       "      <td>4.5296</td>\n",
       "      <td>1.6788</td>\n",
       "      <td>52.082</td>\n",
       "      <td>1.5550</td>\n",
       "      <td>38.973</td>\n",
       "      <td>17.4927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>28 Jan 16</td>\n",
       "      <td>1.0903</td>\n",
       "      <td>129.62</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4626</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3130</td>\n",
       "      <td>0.76228</td>\n",
       "      <td>313.37</td>\n",
       "      <td>...</td>\n",
       "      <td>15116.22</td>\n",
       "      <td>74.3857</td>\n",
       "      <td>1316.36</td>\n",
       "      <td>19.9966</td>\n",
       "      <td>4.5772</td>\n",
       "      <td>1.6874</td>\n",
       "      <td>52.116</td>\n",
       "      <td>1.5556</td>\n",
       "      <td>39.067</td>\n",
       "      <td>17.7785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>27 Jan 16</td>\n",
       "      <td>1.0888</td>\n",
       "      <td>128.91</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.025</td>\n",
       "      <td>7.4625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3252</td>\n",
       "      <td>0.75965</td>\n",
       "      <td>313.85</td>\n",
       "      <td>...</td>\n",
       "      <td>15090.93</td>\n",
       "      <td>74.0928</td>\n",
       "      <td>1308.94</td>\n",
       "      <td>20.0040</td>\n",
       "      <td>4.6203</td>\n",
       "      <td>1.6739</td>\n",
       "      <td>52.162</td>\n",
       "      <td>1.5542</td>\n",
       "      <td>38.963</td>\n",
       "      <td>17.7803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>26 Jan 16</td>\n",
       "      <td>1.0837</td>\n",
       "      <td>128.22</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4622</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3084</td>\n",
       "      <td>0.76095</td>\n",
       "      <td>312.73</td>\n",
       "      <td>...</td>\n",
       "      <td>15004.76</td>\n",
       "      <td>73.5797</td>\n",
       "      <td>1303.82</td>\n",
       "      <td>20.1259</td>\n",
       "      <td>4.6335</td>\n",
       "      <td>1.6777</td>\n",
       "      <td>52.051</td>\n",
       "      <td>1.5498</td>\n",
       "      <td>38.865</td>\n",
       "      <td>17.8881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>25 Jan 16</td>\n",
       "      <td>1.0815</td>\n",
       "      <td>128.07</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3031</td>\n",
       "      <td>0.75890</td>\n",
       "      <td>312.70</td>\n",
       "      <td>...</td>\n",
       "      <td>14985.15</td>\n",
       "      <td>73.2973</td>\n",
       "      <td>1293.53</td>\n",
       "      <td>19.9970</td>\n",
       "      <td>4.6208</td>\n",
       "      <td>1.6728</td>\n",
       "      <td>51.890</td>\n",
       "      <td>1.5469</td>\n",
       "      <td>38.869</td>\n",
       "      <td>17.8580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22 Jan 16</td>\n",
       "      <td>1.0808</td>\n",
       "      <td>127.77</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2945</td>\n",
       "      <td>0.75459</td>\n",
       "      <td>312.20</td>\n",
       "      <td>...</td>\n",
       "      <td>14952.60</td>\n",
       "      <td>73.0945</td>\n",
       "      <td>1292.83</td>\n",
       "      <td>20.0160</td>\n",
       "      <td>4.6308</td>\n",
       "      <td>1.6606</td>\n",
       "      <td>51.580</td>\n",
       "      <td>1.5421</td>\n",
       "      <td>38.921</td>\n",
       "      <td>17.8143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>21 Jan 16</td>\n",
       "      <td>1.0893</td>\n",
       "      <td>127.43</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.064</td>\n",
       "      <td>7.4630</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3277</td>\n",
       "      <td>0.77182</td>\n",
       "      <td>314.42</td>\n",
       "      <td>...</td>\n",
       "      <td>15149.99</td>\n",
       "      <td>74.0684</td>\n",
       "      <td>1321.64</td>\n",
       "      <td>20.2120</td>\n",
       "      <td>4.7818</td>\n",
       "      <td>1.6940</td>\n",
       "      <td>52.166</td>\n",
       "      <td>1.5670</td>\n",
       "      <td>39.503</td>\n",
       "      <td>18.1453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>20 Jan 16</td>\n",
       "      <td>1.0907</td>\n",
       "      <td>127.28</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.042</td>\n",
       "      <td>7.4638</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3360</td>\n",
       "      <td>0.77000</td>\n",
       "      <td>314.76</td>\n",
       "      <td>...</td>\n",
       "      <td>15228.20</td>\n",
       "      <td>74.1627</td>\n",
       "      <td>1326.46</td>\n",
       "      <td>20.0427</td>\n",
       "      <td>4.7936</td>\n",
       "      <td>1.7134</td>\n",
       "      <td>52.219</td>\n",
       "      <td>1.5697</td>\n",
       "      <td>39.582</td>\n",
       "      <td>18.2896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>19 Jan 16</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>128.12</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3025</td>\n",
       "      <td>0.76473</td>\n",
       "      <td>314.56</td>\n",
       "      <td>...</td>\n",
       "      <td>15009.55</td>\n",
       "      <td>73.4840</td>\n",
       "      <td>1306.89</td>\n",
       "      <td>19.6912</td>\n",
       "      <td>4.7530</td>\n",
       "      <td>1.6763</td>\n",
       "      <td>51.740</td>\n",
       "      <td>1.5592</td>\n",
       "      <td>39.428</td>\n",
       "      <td>18.1115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>18 Jan 16</td>\n",
       "      <td>1.0892</td>\n",
       "      <td>127.78</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.037</td>\n",
       "      <td>7.4633</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3090</td>\n",
       "      <td>0.76263</td>\n",
       "      <td>315.42</td>\n",
       "      <td>...</td>\n",
       "      <td>15163.45</td>\n",
       "      <td>73.7266</td>\n",
       "      <td>1317.44</td>\n",
       "      <td>19.8703</td>\n",
       "      <td>4.7887</td>\n",
       "      <td>1.6862</td>\n",
       "      <td>52.036</td>\n",
       "      <td>1.5674</td>\n",
       "      <td>39.516</td>\n",
       "      <td>18.2882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>15 Jan 16</td>\n",
       "      <td>1.0914</td>\n",
       "      <td>127.80</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.3125</td>\n",
       "      <td>0.76150</td>\n",
       "      <td>314.35</td>\n",
       "      <td>...</td>\n",
       "      <td>15268.11</td>\n",
       "      <td>73.9860</td>\n",
       "      <td>1328.97</td>\n",
       "      <td>19.7876</td>\n",
       "      <td>4.8281</td>\n",
       "      <td>1.7103</td>\n",
       "      <td>52.281</td>\n",
       "      <td>1.5735</td>\n",
       "      <td>39.705</td>\n",
       "      <td>18.2254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14 Jan 16</td>\n",
       "      <td>1.0893</td>\n",
       "      <td>128.26</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2986</td>\n",
       "      <td>0.75703</td>\n",
       "      <td>315.97</td>\n",
       "      <td>...</td>\n",
       "      <td>15155.06</td>\n",
       "      <td>73.4516</td>\n",
       "      <td>1320.77</td>\n",
       "      <td>19.5529</td>\n",
       "      <td>4.7855</td>\n",
       "      <td>1.6903</td>\n",
       "      <td>52.076</td>\n",
       "      <td>1.5670</td>\n",
       "      <td>39.552</td>\n",
       "      <td>18.0475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>13 Jan 16</td>\n",
       "      <td>1.0816</td>\n",
       "      <td>127.74</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4614</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2635</td>\n",
       "      <td>0.75020</td>\n",
       "      <td>315.43</td>\n",
       "      <td>...</td>\n",
       "      <td>14947.98</td>\n",
       "      <td>72.3212</td>\n",
       "      <td>1301.18</td>\n",
       "      <td>19.2779</td>\n",
       "      <td>4.7382</td>\n",
       "      <td>1.6519</td>\n",
       "      <td>51.283</td>\n",
       "      <td>1.5492</td>\n",
       "      <td>39.203</td>\n",
       "      <td>17.8353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>12 Jan 16</td>\n",
       "      <td>1.0836</td>\n",
       "      <td>127.79</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4612</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2711</td>\n",
       "      <td>0.75080</td>\n",
       "      <td>317.75</td>\n",
       "      <td>...</td>\n",
       "      <td>14965.60</td>\n",
       "      <td>72.4603</td>\n",
       "      <td>1308.87</td>\n",
       "      <td>19.2772</td>\n",
       "      <td>4.7830</td>\n",
       "      <td>1.6547</td>\n",
       "      <td>51.296</td>\n",
       "      <td>1.5570</td>\n",
       "      <td>39.368</td>\n",
       "      <td>17.9737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>11 Jan 16</td>\n",
       "      <td>1.0888</td>\n",
       "      <td>128.33</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2827</td>\n",
       "      <td>0.74705</td>\n",
       "      <td>317.32</td>\n",
       "      <td>...</td>\n",
       "      <td>15076.42</td>\n",
       "      <td>72.7413</td>\n",
       "      <td>1309.12</td>\n",
       "      <td>19.4182</td>\n",
       "      <td>4.7655</td>\n",
       "      <td>1.6577</td>\n",
       "      <td>51.326</td>\n",
       "      <td>1.5607</td>\n",
       "      <td>39.491</td>\n",
       "      <td>18.0474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8 Jan 16</td>\n",
       "      <td>1.0861</td>\n",
       "      <td>128.51</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4598</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2597</td>\n",
       "      <td>0.74519</td>\n",
       "      <td>315.53</td>\n",
       "      <td>...</td>\n",
       "      <td>15111.30</td>\n",
       "      <td>72.4206</td>\n",
       "      <td>1304.78</td>\n",
       "      <td>19.3231</td>\n",
       "      <td>4.7615</td>\n",
       "      <td>1.6450</td>\n",
       "      <td>51.204</td>\n",
       "      <td>1.5606</td>\n",
       "      <td>39.387</td>\n",
       "      <td>17.3870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7 Jan 16</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>127.74</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.030</td>\n",
       "      <td>7.4596</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2700</td>\n",
       "      <td>0.74545</td>\n",
       "      <td>315.79</td>\n",
       "      <td>...</td>\n",
       "      <td>15139.18</td>\n",
       "      <td>72.7012</td>\n",
       "      <td>1306.87</td>\n",
       "      <td>19.2176</td>\n",
       "      <td>4.7904</td>\n",
       "      <td>1.6464</td>\n",
       "      <td>51.226</td>\n",
       "      <td>1.5612</td>\n",
       "      <td>39.442</td>\n",
       "      <td>17.4987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6 Jan 16</td>\n",
       "      <td>1.0742</td>\n",
       "      <td>127.19</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2389</td>\n",
       "      <td>0.73440</td>\n",
       "      <td>314.81</td>\n",
       "      <td>...</td>\n",
       "      <td>14988.90</td>\n",
       "      <td>71.8242</td>\n",
       "      <td>1289.20</td>\n",
       "      <td>18.7480</td>\n",
       "      <td>4.7388</td>\n",
       "      <td>1.6166</td>\n",
       "      <td>50.588</td>\n",
       "      <td>1.5409</td>\n",
       "      <td>38.917</td>\n",
       "      <td>17.0032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5 Jan 16</td>\n",
       "      <td>1.0746</td>\n",
       "      <td>127.88</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4605</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2144</td>\n",
       "      <td>0.73235</td>\n",
       "      <td>315.20</td>\n",
       "      <td>...</td>\n",
       "      <td>14879.48</td>\n",
       "      <td>71.5539</td>\n",
       "      <td>1277.02</td>\n",
       "      <td>18.5798</td>\n",
       "      <td>4.6670</td>\n",
       "      <td>1.6001</td>\n",
       "      <td>50.371</td>\n",
       "      <td>1.5310</td>\n",
       "      <td>38.816</td>\n",
       "      <td>16.7643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4 Jan 16</td>\n",
       "      <td>1.0898</td>\n",
       "      <td>129.78</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4620</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2659</td>\n",
       "      <td>0.73810</td>\n",
       "      <td>315.39</td>\n",
       "      <td>...</td>\n",
       "      <td>15194.63</td>\n",
       "      <td>72.6170</td>\n",
       "      <td>1297.87</td>\n",
       "      <td>18.9353</td>\n",
       "      <td>4.7363</td>\n",
       "      <td>1.6146</td>\n",
       "      <td>51.393</td>\n",
       "      <td>1.5533</td>\n",
       "      <td>39.407</td>\n",
       "      <td>16.9558</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0     USD     JPY     BGN     CZK     DKK  EEK     ILS      GBP  \\\n",
       "19  29 Jan 16  1.0920  132.25  1.9558  27.026  7.4628  NaN  4.3084  0.76410   \n",
       "18  28 Jan 16  1.0903  129.62  1.9558  27.021  7.4626  NaN  4.3130  0.76228   \n",
       "17  27 Jan 16  1.0888  128.91  1.9558  27.025  7.4625  NaN  4.3252  0.75965   \n",
       "16  26 Jan 16  1.0837  128.22  1.9558  27.021  7.4622  NaN  4.3084  0.76095   \n",
       "15  25 Jan 16  1.0815  128.07  1.9558  27.021  7.4624  NaN  4.3031  0.75890   \n",
       "14  22 Jan 16  1.0808  127.77  1.9558  27.026  7.4621  NaN  4.2945  0.75459   \n",
       "13  21 Jan 16  1.0893  127.43  1.9558  27.064  7.4630  NaN  4.3277  0.77182   \n",
       "12  20 Jan 16  1.0907  127.28  1.9558  27.042  7.4638  NaN  4.3360  0.77000   \n",
       "11  19 Jan 16  1.0868  128.12  1.9558  27.023  7.4628  NaN  4.3025  0.76473   \n",
       "10  18 Jan 16  1.0892  127.78  1.9558  27.037  7.4633  NaN  4.3090  0.76263   \n",
       "9   15 Jan 16  1.0914  127.80  1.9558  27.021  7.4631  NaN  4.3125  0.76150   \n",
       "8   14 Jan 16  1.0893  128.26  1.9558  27.021  7.4624  NaN  4.2986  0.75703   \n",
       "7   13 Jan 16  1.0816  127.74  1.9558  27.021  7.4614  NaN  4.2635  0.75020   \n",
       "6   12 Jan 16  1.0836  127.79  1.9558  27.021  7.4612  NaN  4.2711  0.75080   \n",
       "5   11 Jan 16  1.0888  128.33  1.9558  27.021  7.4603  NaN  4.2827  0.74705   \n",
       "4    8 Jan 16  1.0861  128.51  1.9558  27.022  7.4598  NaN  4.2597  0.74519   \n",
       "3    7 Jan 16  1.0868  127.74  1.9558  27.030  7.4596  NaN  4.2700  0.74545   \n",
       "2    6 Jan 16  1.0742  127.19  1.9558  27.026  7.4603  NaN  4.2389  0.73440   \n",
       "1    5 Jan 16  1.0746  127.88  1.9558  27.022  7.4605  NaN  4.2144  0.73235   \n",
       "0    4 Jan 16  1.0898  129.78  1.9558  27.023  7.4620  NaN  4.2659  0.73810   \n",
       "\n",
       "       HUF  ...       IDR      INR      KRW      MXN     MYR     NZD     PHP  \\\n",
       "19  312.03  ...  14967.64  74.1039  1318.60  20.0054  4.5296  1.6788  52.082   \n",
       "18  313.37  ...  15116.22  74.3857  1316.36  19.9966  4.5772  1.6874  52.116   \n",
       "17  313.85  ...  15090.93  74.0928  1308.94  20.0040  4.6203  1.6739  52.162   \n",
       "16  312.73  ...  15004.76  73.5797  1303.82  20.1259  4.6335  1.6777  52.051   \n",
       "15  312.70  ...  14985.15  73.2973  1293.53  19.9970  4.6208  1.6728  51.890   \n",
       "14  312.20  ...  14952.60  73.0945  1292.83  20.0160  4.6308  1.6606  51.580   \n",
       "13  314.42  ...  15149.99  74.0684  1321.64  20.2120  4.7818  1.6940  52.166   \n",
       "12  314.76  ...  15228.20  74.1627  1326.46  20.0427  4.7936  1.7134  52.219   \n",
       "11  314.56  ...  15009.55  73.4840  1306.89  19.6912  4.7530  1.6763  51.740   \n",
       "10  315.42  ...  15163.45  73.7266  1317.44  19.8703  4.7887  1.6862  52.036   \n",
       "9   314.35  ...  15268.11  73.9860  1328.97  19.7876  4.8281  1.7103  52.281   \n",
       "8   315.97  ...  15155.06  73.4516  1320.77  19.5529  4.7855  1.6903  52.076   \n",
       "7   315.43  ...  14947.98  72.3212  1301.18  19.2779  4.7382  1.6519  51.283   \n",
       "6   317.75  ...  14965.60  72.4603  1308.87  19.2772  4.7830  1.6547  51.296   \n",
       "5   317.32  ...  15076.42  72.7413  1309.12  19.4182  4.7655  1.6577  51.326   \n",
       "4   315.53  ...  15111.30  72.4206  1304.78  19.3231  4.7615  1.6450  51.204   \n",
       "3   315.79  ...  15139.18  72.7012  1306.87  19.2176  4.7904  1.6464  51.226   \n",
       "2   314.81  ...  14988.90  71.8242  1289.20  18.7480  4.7388  1.6166  50.588   \n",
       "1   315.20  ...  14879.48  71.5539  1277.02  18.5798  4.6670  1.6001  50.371   \n",
       "0   315.39  ...  15194.63  72.6170  1297.87  18.9353  4.7363  1.6146  51.393   \n",
       "\n",
       "       SGD     THB      ZAR  \n",
       "19  1.5550  38.973  17.4927  \n",
       "18  1.5556  39.067  17.7785  \n",
       "17  1.5542  38.963  17.7803  \n",
       "16  1.5498  38.865  17.8881  \n",
       "15  1.5469  38.869  17.8580  \n",
       "14  1.5421  38.921  17.8143  \n",
       "13  1.5670  39.503  18.1453  \n",
       "12  1.5697  39.582  18.2896  \n",
       "11  1.5592  39.428  18.1115  \n",
       "10  1.5674  39.516  18.2882  \n",
       "9   1.5735  39.705  18.2254  \n",
       "8   1.5670  39.552  18.0475  \n",
       "7   1.5492  39.203  17.8353  \n",
       "6   1.5570  39.368  17.9737  \n",
       "5   1.5607  39.491  18.0474  \n",
       "4   1.5606  39.387  17.3870  \n",
       "3   1.5612  39.442  17.4987  \n",
       "2   1.5409  38.917  17.0032  \n",
       "1   1.5310  38.816  16.7643  \n",
       "0   1.5533  39.407  16.9558  \n",
       "\n",
       "[20 rows x 37 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_index(ascending=False)\n",
    "#This will osrt in descending order by index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "d692934d-31a9-46f6-a0fd-410e1c3beedd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\sorting.py:373: RuntimeWarning: divide by zero encountered in invert\n",
      "  non_nans = items[~mask]\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\sorting.py:374: RuntimeWarning: divide by zero encountered in invert\n",
      "  non_nan_idx = idx[~mask]\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:258: RuntimeWarning: divide by zero encountered in less\n",
      "  mask = indices < 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:263: RuntimeWarning: divide by zero encountered in greater_equal\n",
      "  mask = (indices >= n) | (indices < 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:263: RuntimeWarning: divide by zero encountered in less\n",
      "  mask = (indices >= n) | (indices < 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexers.py:263: RuntimeWarning: divide by zero encountered in bitwise_or\n",
      "  mask = (indices >= n) | (indices < 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:641: RuntimeWarning: divide by zero encountered in isnan\n",
      "  if not checker(arr[i : i + chunk_len]).all():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:57: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_all(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\concat.py:194: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (indexer == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:116: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  lwidth -= np.array([self.adj.len(x) for x in idx]).max() + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:190: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  w_adjoined = w + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:191: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  curr_width += w_adjoined\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:195: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 2 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:193: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 1 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:641: RuntimeWarning: divide by zero encountered in isnan\n",
      "  if not checker(arr[i : i + chunk_len]).all():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:57: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_all(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\concat.py:194: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (indexer == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AUD</th>\n",
       "      <th>BGN</th>\n",
       "      <th>BRL</th>\n",
       "      <th>CAD</th>\n",
       "      <th>CHF</th>\n",
       "      <th>CNY</th>\n",
       "      <th>CZK</th>\n",
       "      <th>DKK</th>\n",
       "      <th>EEK</th>\n",
       "      <th>GBP</th>\n",
       "      <th>...</th>\n",
       "      <th>RON</th>\n",
       "      <th>RUB</th>\n",
       "      <th>SEK</th>\n",
       "      <th>SGD</th>\n",
       "      <th>SKK</th>\n",
       "      <th>THB</th>\n",
       "      <th>TRY</th>\n",
       "      <th>USD</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>ZAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.5153</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4023</td>\n",
       "      <td>1.5172</td>\n",
       "      <td>1.0891</td>\n",
       "      <td>7.1208</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4620</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.73810</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5170</td>\n",
       "      <td>79.6738</td>\n",
       "      <td>9.1696</td>\n",
       "      <td>1.5533</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.407</td>\n",
       "      <td>3.2193</td>\n",
       "      <td>1.0898</td>\n",
       "      <td>4 Jan 16</td>\n",
       "      <td>16.9558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.4982</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3023</td>\n",
       "      <td>1.4976</td>\n",
       "      <td>1.0847</td>\n",
       "      <td>7.0074</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4605</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.73235</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5268</td>\n",
       "      <td>78.8620</td>\n",
       "      <td>9.2235</td>\n",
       "      <td>1.5310</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.816</td>\n",
       "      <td>3.2009</td>\n",
       "      <td>1.0746</td>\n",
       "      <td>5 Jan 16</td>\n",
       "      <td>16.7643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5187</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3331</td>\n",
       "      <td>1.5137</td>\n",
       "      <td>1.0846</td>\n",
       "      <td>7.0388</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.73440</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5224</td>\n",
       "      <td>79.9893</td>\n",
       "      <td>9.2330</td>\n",
       "      <td>1.5409</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.917</td>\n",
       "      <td>3.2315</td>\n",
       "      <td>1.0742</td>\n",
       "      <td>6 Jan 16</td>\n",
       "      <td>17.0032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.5550</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4001</td>\n",
       "      <td>1.5360</td>\n",
       "      <td>1.0875</td>\n",
       "      <td>7.1672</td>\n",
       "      <td>27.030</td>\n",
       "      <td>7.4596</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.74545</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5288</td>\n",
       "      <td>81.7776</td>\n",
       "      <td>9.2780</td>\n",
       "      <td>1.5612</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.442</td>\n",
       "      <td>3.2791</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>7 Jan 16</td>\n",
       "      <td>17.4987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.5495</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3685</td>\n",
       "      <td>1.5321</td>\n",
       "      <td>1.0860</td>\n",
       "      <td>7.1577</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4598</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.74519</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5275</td>\n",
       "      <td>80.4134</td>\n",
       "      <td>9.2640</td>\n",
       "      <td>1.5606</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.387</td>\n",
       "      <td>3.2491</td>\n",
       "      <td>1.0861</td>\n",
       "      <td>8 Jan 16</td>\n",
       "      <td>17.3870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5516</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3786</td>\n",
       "      <td>1.5336</td>\n",
       "      <td>1.0863</td>\n",
       "      <td>7.1554</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.74705</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5305</td>\n",
       "      <td>81.9975</td>\n",
       "      <td>9.2720</td>\n",
       "      <td>1.5607</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.491</td>\n",
       "      <td>3.2872</td>\n",
       "      <td>1.0888</td>\n",
       "      <td>11 Jan 16</td>\n",
       "      <td>18.0474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.5460</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3704</td>\n",
       "      <td>1.5370</td>\n",
       "      <td>1.0855</td>\n",
       "      <td>7.1276</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4612</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.75080</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5333</td>\n",
       "      <td>82.6895</td>\n",
       "      <td>9.2483</td>\n",
       "      <td>1.5570</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.368</td>\n",
       "      <td>3.2842</td>\n",
       "      <td>1.0836</td>\n",
       "      <td>12 Jan 16</td>\n",
       "      <td>17.9737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.5413</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3214</td>\n",
       "      <td>1.5381</td>\n",
       "      <td>1.0926</td>\n",
       "      <td>7.1121</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4614</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.75020</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5300</td>\n",
       "      <td>82.3098</td>\n",
       "      <td>9.2460</td>\n",
       "      <td>1.5492</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.203</td>\n",
       "      <td>3.2626</td>\n",
       "      <td>1.0816</td>\n",
       "      <td>13 Jan 16</td>\n",
       "      <td>17.8353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.5695</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3730</td>\n",
       "      <td>1.5647</td>\n",
       "      <td>1.0950</td>\n",
       "      <td>7.1809</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.75703</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5348</td>\n",
       "      <td>83.2007</td>\n",
       "      <td>9.2850</td>\n",
       "      <td>1.5670</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.552</td>\n",
       "      <td>3.3025</td>\n",
       "      <td>1.0893</td>\n",
       "      <td>14 Jan 16</td>\n",
       "      <td>18.0475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1.5895</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4139</td>\n",
       "      <td>1.5849</td>\n",
       "      <td>1.0951</td>\n",
       "      <td>7.1888</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.76150</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5375</td>\n",
       "      <td>84.6924</td>\n",
       "      <td>9.3474</td>\n",
       "      <td>1.5735</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.705</td>\n",
       "      <td>3.3208</td>\n",
       "      <td>1.0914</td>\n",
       "      <td>15 Jan 16</td>\n",
       "      <td>18.2254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.5810</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3929</td>\n",
       "      <td>1.5800</td>\n",
       "      <td>1.0946</td>\n",
       "      <td>7.1658</td>\n",
       "      <td>27.037</td>\n",
       "      <td>7.4633</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.76263</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5365</td>\n",
       "      <td>86.1920</td>\n",
       "      <td>9.3411</td>\n",
       "      <td>1.5674</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.516</td>\n",
       "      <td>3.3102</td>\n",
       "      <td>1.0892</td>\n",
       "      <td>18 Jan 16</td>\n",
       "      <td>18.2882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1.5673</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3758</td>\n",
       "      <td>1.5750</td>\n",
       "      <td>1.0922</td>\n",
       "      <td>7.1496</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.76473</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5305</td>\n",
       "      <td>85.2445</td>\n",
       "      <td>9.3231</td>\n",
       "      <td>1.5592</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.428</td>\n",
       "      <td>3.3030</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>19 Jan 16</td>\n",
       "      <td>18.1115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1.5916</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4559</td>\n",
       "      <td>1.5965</td>\n",
       "      <td>1.0932</td>\n",
       "      <td>7.1768</td>\n",
       "      <td>27.042</td>\n",
       "      <td>7.4638</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.77000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5326</td>\n",
       "      <td>88.2005</td>\n",
       "      <td>9.3431</td>\n",
       "      <td>1.5697</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.582</td>\n",
       "      <td>3.3307</td>\n",
       "      <td>1.0907</td>\n",
       "      <td>20 Jan 16</td>\n",
       "      <td>18.2896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1.5755</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.5230</td>\n",
       "      <td>1.5750</td>\n",
       "      <td>1.0949</td>\n",
       "      <td>7.1666</td>\n",
       "      <td>27.064</td>\n",
       "      <td>7.4630</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.77182</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5316</td>\n",
       "      <td>91.7660</td>\n",
       "      <td>9.3527</td>\n",
       "      <td>1.5670</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.503</td>\n",
       "      <td>3.3098</td>\n",
       "      <td>1.0893</td>\n",
       "      <td>21 Jan 16</td>\n",
       "      <td>18.1453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.5380</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4550</td>\n",
       "      <td>1.5316</td>\n",
       "      <td>1.0950</td>\n",
       "      <td>7.1104</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4621</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.75459</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5273</td>\n",
       "      <td>85.8930</td>\n",
       "      <td>9.2738</td>\n",
       "      <td>1.5421</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.921</td>\n",
       "      <td>3.2572</td>\n",
       "      <td>1.0808</td>\n",
       "      <td>22 Jan 16</td>\n",
       "      <td>17.8143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1.5496</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4276</td>\n",
       "      <td>1.5351</td>\n",
       "      <td>1.0981</td>\n",
       "      <td>7.1156</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.75890</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5256</td>\n",
       "      <td>86.0410</td>\n",
       "      <td>9.2758</td>\n",
       "      <td>1.5469</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.869</td>\n",
       "      <td>3.2660</td>\n",
       "      <td>1.0815</td>\n",
       "      <td>25 Jan 16</td>\n",
       "      <td>17.8580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1.5550</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4465</td>\n",
       "      <td>1.5411</td>\n",
       "      <td>1.1008</td>\n",
       "      <td>7.1314</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4622</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.76095</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5348</td>\n",
       "      <td>86.7725</td>\n",
       "      <td>9.2644</td>\n",
       "      <td>1.5498</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.865</td>\n",
       "      <td>3.2699</td>\n",
       "      <td>1.0837</td>\n",
       "      <td>26 Jan 16</td>\n",
       "      <td>17.8881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.5461</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.3963</td>\n",
       "      <td>1.5331</td>\n",
       "      <td>1.1068</td>\n",
       "      <td>7.1621</td>\n",
       "      <td>27.025</td>\n",
       "      <td>7.4625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.75965</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5388</td>\n",
       "      <td>85.2106</td>\n",
       "      <td>9.2591</td>\n",
       "      <td>1.5542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.963</td>\n",
       "      <td>3.2560</td>\n",
       "      <td>1.0888</td>\n",
       "      <td>27 Jan 16</td>\n",
       "      <td>17.7803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.5419</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4753</td>\n",
       "      <td>1.5357</td>\n",
       "      <td>1.1053</td>\n",
       "      <td>7.1705</td>\n",
       "      <td>27.021</td>\n",
       "      <td>7.4626</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.76228</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5400</td>\n",
       "      <td>83.5018</td>\n",
       "      <td>9.3046</td>\n",
       "      <td>1.5556</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.067</td>\n",
       "      <td>3.2485</td>\n",
       "      <td>1.0903</td>\n",
       "      <td>28 Jan 16</td>\n",
       "      <td>17.7785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1.5388</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>4.4294</td>\n",
       "      <td>1.5363</td>\n",
       "      <td>1.1144</td>\n",
       "      <td>7.1810</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.76410</td>\n",
       "      <td>...</td>\n",
       "      <td>4.5352</td>\n",
       "      <td>82.8472</td>\n",
       "      <td>9.3483</td>\n",
       "      <td>1.5550</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.973</td>\n",
       "      <td>3.2365</td>\n",
       "      <td>1.0920</td>\n",
       "      <td>29 Jan 16</td>\n",
       "      <td>17.4927</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       AUD     BGN     BRL     CAD     CHF     CNY     CZK     DKK  EEK  \\\n",
       "0   1.5153  1.9558  4.4023  1.5172  1.0891  7.1208  27.023  7.4620  NaN   \n",
       "1   1.4982  1.9558  4.3023  1.4976  1.0847  7.0074  27.022  7.4605  NaN   \n",
       "2   1.5187  1.9558  4.3331  1.5137  1.0846  7.0388  27.026  7.4603  NaN   \n",
       "3   1.5550  1.9558  4.4001  1.5360  1.0875  7.1672  27.030  7.4596  NaN   \n",
       "4   1.5495  1.9558  4.3685  1.5321  1.0860  7.1577  27.022  7.4598  NaN   \n",
       "5   1.5516  1.9558  4.3786  1.5336  1.0863  7.1554  27.021  7.4603  NaN   \n",
       "6   1.5460  1.9558  4.3704  1.5370  1.0855  7.1276  27.021  7.4612  NaN   \n",
       "7   1.5413  1.9558  4.3214  1.5381  1.0926  7.1121  27.021  7.4614  NaN   \n",
       "8   1.5695  1.9558  4.3730  1.5647  1.0950  7.1809  27.021  7.4624  NaN   \n",
       "9   1.5895  1.9558  4.4139  1.5849  1.0951  7.1888  27.021  7.4631  NaN   \n",
       "10  1.5810  1.9558  4.3929  1.5800  1.0946  7.1658  27.037  7.4633  NaN   \n",
       "11  1.5673  1.9558  4.3758  1.5750  1.0922  7.1496  27.023  7.4628  NaN   \n",
       "12  1.5916  1.9558  4.4559  1.5965  1.0932  7.1768  27.042  7.4638  NaN   \n",
       "13  1.5755  1.9558  4.5230  1.5750  1.0949  7.1666  27.064  7.4630  NaN   \n",
       "14  1.5380  1.9558  4.4550  1.5316  1.0950  7.1104  27.026  7.4621  NaN   \n",
       "15  1.5496  1.9558  4.4276  1.5351  1.0981  7.1156  27.021  7.4624  NaN   \n",
       "16  1.5550  1.9558  4.4465  1.5411  1.1008  7.1314  27.021  7.4622  NaN   \n",
       "17  1.5461  1.9558  4.3963  1.5331  1.1068  7.1621  27.025  7.4625  NaN   \n",
       "18  1.5419  1.9558  4.4753  1.5357  1.1053  7.1705  27.021  7.4626  NaN   \n",
       "19  1.5388  1.9558  4.4294  1.5363  1.1144  7.1810  27.026  7.4628  NaN   \n",
       "\n",
       "        GBP  ...     RON      RUB     SEK     SGD  SKK     THB     TRY  \\\n",
       "0   0.73810  ...  4.5170  79.6738  9.1696  1.5533  NaN  39.407  3.2193   \n",
       "1   0.73235  ...  4.5268  78.8620  9.2235  1.5310  NaN  38.816  3.2009   \n",
       "2   0.73440  ...  4.5224  79.9893  9.2330  1.5409  NaN  38.917  3.2315   \n",
       "3   0.74545  ...  4.5288  81.7776  9.2780  1.5612  NaN  39.442  3.2791   \n",
       "4   0.74519  ...  4.5275  80.4134  9.2640  1.5606  NaN  39.387  3.2491   \n",
       "5   0.74705  ...  4.5305  81.9975  9.2720  1.5607  NaN  39.491  3.2872   \n",
       "6   0.75080  ...  4.5333  82.6895  9.2483  1.5570  NaN  39.368  3.2842   \n",
       "7   0.75020  ...  4.5300  82.3098  9.2460  1.5492  NaN  39.203  3.2626   \n",
       "8   0.75703  ...  4.5348  83.2007  9.2850  1.5670  NaN  39.552  3.3025   \n",
       "9   0.76150  ...  4.5375  84.6924  9.3474  1.5735  NaN  39.705  3.3208   \n",
       "10  0.76263  ...  4.5365  86.1920  9.3411  1.5674  NaN  39.516  3.3102   \n",
       "11  0.76473  ...  4.5305  85.2445  9.3231  1.5592  NaN  39.428  3.3030   \n",
       "12  0.77000  ...  4.5326  88.2005  9.3431  1.5697  NaN  39.582  3.3307   \n",
       "13  0.77182  ...  4.5316  91.7660  9.3527  1.5670  NaN  39.503  3.3098   \n",
       "14  0.75459  ...  4.5273  85.8930  9.2738  1.5421  NaN  38.921  3.2572   \n",
       "15  0.75890  ...  4.5256  86.0410  9.2758  1.5469  NaN  38.869  3.2660   \n",
       "16  0.76095  ...  4.5348  86.7725  9.2644  1.5498  NaN  38.865  3.2699   \n",
       "17  0.75965  ...  4.5388  85.2106  9.2591  1.5542  NaN  38.963  3.2560   \n",
       "18  0.76228  ...  4.5400  83.5018  9.3046  1.5556  NaN  39.067  3.2485   \n",
       "19  0.76410  ...  4.5352  82.8472  9.3483  1.5550  NaN  38.973  3.2365   \n",
       "\n",
       "       USD  Unnamed: 0      ZAR  \n",
       "0   1.0898    4 Jan 16  16.9558  \n",
       "1   1.0746    5 Jan 16  16.7643  \n",
       "2   1.0742    6 Jan 16  17.0032  \n",
       "3   1.0868    7 Jan 16  17.4987  \n",
       "4   1.0861    8 Jan 16  17.3870  \n",
       "5   1.0888   11 Jan 16  18.0474  \n",
       "6   1.0836   12 Jan 16  17.9737  \n",
       "7   1.0816   13 Jan 16  17.8353  \n",
       "8   1.0893   14 Jan 16  18.0475  \n",
       "9   1.0914   15 Jan 16  18.2254  \n",
       "10  1.0892   18 Jan 16  18.2882  \n",
       "11  1.0868   19 Jan 16  18.1115  \n",
       "12  1.0907   20 Jan 16  18.2896  \n",
       "13  1.0893   21 Jan 16  18.1453  \n",
       "14  1.0808   22 Jan 16  17.8143  \n",
       "15  1.0815   25 Jan 16  17.8580  \n",
       "16  1.0837   26 Jan 16  17.8881  \n",
       "17  1.0888   27 Jan 16  17.7803  \n",
       "18  1.0903   28 Jan 16  17.7785  \n",
       "19  1.0920   29 Jan 16  17.4927  \n",
       "\n",
       "[20 rows x 37 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_index(axis=1)\n",
    "#This will sort by column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "61929f2d-abad-4ae8-9442-3f76118d5e70",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\algorithms.py:731: RuntimeWarning: divide by zero encountered in equal\n",
      "  code_is_na = codes == na_sentinel\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:43: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_minimum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\sorting.py:584: RuntimeWarning: divide by zero encountered in log\n",
      "  do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\sorting.py:584: RuntimeWarning: divide by zero encountered in double_scalars\n",
      "  do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[(1.4982,\n",
       "  1    5 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5153,\n",
       "  0    4 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5187,\n",
       "  2    6 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.538,\n",
       "  14    22 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5388,\n",
       "  19    29 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5413,\n",
       "  7    13 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5419,\n",
       "  18    28 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.546,\n",
       "  6    12 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5461,\n",
       "  17    27 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5495,\n",
       "  4    8 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5496,\n",
       "  15    25 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5516,\n",
       "  5    11 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.555,\n",
       "  3      7 Jan 16\n",
       "  16    26 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5673,\n",
       "  11    19 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5695,\n",
       "  8    14 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5755,\n",
       "  13    21 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.581,\n",
       "  10    18 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5895,\n",
       "  9    15 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object),\n",
       " (1.5916,\n",
       "  12    20 Jan 16\n",
       "  Name: Unnamed: 0, dtype: object)]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df['Unnamed: 0'].groupby(df['AUD']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72eb2ff7-0a7d-4bf1-ac32-3bb0ddd6f3bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i,row in df.iterrows():\n",
    "    while i<1:\n",
    "        print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "474275ad-a992-49c9-9d2c-e63126f63593",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrameGroupBy' object has no attribute 'AGG'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-81-7b4c74fc91b4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"AUD\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mAGG\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m{\u001b[0m\u001b[1;34m\"Unnamed: 0\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"sum\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"max\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"mean\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\groupby\\groupby.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, attr)\u001b[0m\n\u001b[0;32m    750\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mattr\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    751\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 752\u001b[1;33m         raise AttributeError(\n\u001b[0m\u001b[0;32m    753\u001b[0m             \u001b[1;34mf\"'{type(self).__name__}' object has no attribute '{attr}'\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    754\u001b[0m         )\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrameGroupBy' object has no attribute 'AGG'"
     ]
    }
   ],
   "source": [
    "df.groupby([\"AUD\"]).AGG({\"Unnamed: 0\":[\"sum\",\"max\",\"mean\",lambda x:x.max()-x.min()]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "141c34c9-ac91-4212-8a5e-cbc28e495df8",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Looping' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-85-6d42a9c20fd5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mLooping\u001b[0m \u001b[1;33m&\u001b[0m \u001b[0mIterrows\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'Looping' is not defined"
     ]
    }
   ],
   "source": [
    "Looping & Iterrows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "5b1936b5-bd25-4e88-8c2d-e65e0bc0f4e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:116: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  lwidth -= np.array([self.adj.len(x) for x in idx]).max() + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:190: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  w_adjoined = w + adjoin_width\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:191: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  curr_width += w_adjoined\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:195: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 2 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\string.py:193: RuntimeWarning: divide by zero encountered in long_scalars\n",
      "  wrap = curr_width + 1 > line_width and i > 0\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:1423: RuntimeWarning: divide by zero encountered in int_scalars\n",
      "  max_len = max(len(mgr_locs), taker.max() + 1)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:39: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_maximum(a, axis, None, out, keepdims, initial, where)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py:246: RuntimeWarning: divide by zero encountered in equal\n",
      "  if (new_blknos == -1).any():\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:54: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return umr_any(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:344: RuntimeWarning: divide by zero encountered in invert\n",
      "  return ~res\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: divide by zero encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1297: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  lib.map_infer(vals, is_float)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\core\\dtypes\\missing.py:235: RuntimeWarning: divide by zero encountered in isnan\n",
      "  result = np.isnan(values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1474: RuntimeWarning: divide by zero encountered in absolute\n",
      "  abs_vals = np.abs(self.values)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1478: RuntimeWarning: divide by zero encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in less\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in greater\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\format.py:1480: RuntimeWarning: divide by zero encountered in bitwise_and\n",
      "  (abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>USD</th>\n",
       "      <th>JPY</th>\n",
       "      <th>BGN</th>\n",
       "      <th>CZK</th>\n",
       "      <th>DKK</th>\n",
       "      <th>EEK</th>\n",
       "      <th>ILS</th>\n",
       "      <th>GBP</th>\n",
       "      <th>HUF</th>\n",
       "      <th>...</th>\n",
       "      <th>IDR</th>\n",
       "      <th>INR</th>\n",
       "      <th>KRW</th>\n",
       "      <th>MXN</th>\n",
       "      <th>MYR</th>\n",
       "      <th>NZD</th>\n",
       "      <th>PHP</th>\n",
       "      <th>SGD</th>\n",
       "      <th>THB</th>\n",
       "      <th>ZAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4 Jan 16</td>\n",
       "      <td>1.0898</td>\n",
       "      <td>129.78</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.023</td>\n",
       "      <td>7.4620</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2659</td>\n",
       "      <td>0.73810</td>\n",
       "      <td>315.39</td>\n",
       "      <td>...</td>\n",
       "      <td>15194.63</td>\n",
       "      <td>72.6170</td>\n",
       "      <td>1297.87</td>\n",
       "      <td>18.9353</td>\n",
       "      <td>4.7363</td>\n",
       "      <td>1.6146</td>\n",
       "      <td>51.393</td>\n",
       "      <td>1.5533</td>\n",
       "      <td>39.407</td>\n",
       "      <td>16.9558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5 Jan 16</td>\n",
       "      <td>1.0746</td>\n",
       "      <td>127.88</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.022</td>\n",
       "      <td>7.4605</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2144</td>\n",
       "      <td>0.73235</td>\n",
       "      <td>315.20</td>\n",
       "      <td>...</td>\n",
       "      <td>14879.48</td>\n",
       "      <td>71.5539</td>\n",
       "      <td>1277.02</td>\n",
       "      <td>18.5798</td>\n",
       "      <td>4.6670</td>\n",
       "      <td>1.6001</td>\n",
       "      <td>50.371</td>\n",
       "      <td>1.5310</td>\n",
       "      <td>38.816</td>\n",
       "      <td>16.7643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6 Jan 16</td>\n",
       "      <td>1.0742</td>\n",
       "      <td>127.19</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.026</td>\n",
       "      <td>7.4603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2389</td>\n",
       "      <td>0.73440</td>\n",
       "      <td>314.81</td>\n",
       "      <td>...</td>\n",
       "      <td>14988.90</td>\n",
       "      <td>71.8242</td>\n",
       "      <td>1289.20</td>\n",
       "      <td>18.7480</td>\n",
       "      <td>4.7388</td>\n",
       "      <td>1.6166</td>\n",
       "      <td>50.588</td>\n",
       "      <td>1.5409</td>\n",
       "      <td>38.917</td>\n",
       "      <td>17.0032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7 Jan 16</td>\n",
       "      <td>1.0868</td>\n",
       "      <td>127.74</td>\n",
       "      <td>1.9558</td>\n",
       "      <td>27.030</td>\n",
       "      <td>7.4596</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2700</td>\n",
       "      <td>0.74545</td>\n",
       "      <td>315.79</td>\n",
       "      <td>...</td>\n",
       "      <td>15139.18</td>\n",
       "      <td>72.7012</td>\n",
       "      <td>1306.87</td>\n",
       "      <td>19.2176</td>\n",
       "      <td>4.7904</td>\n",
       "      <td>1.6464</td>\n",
       "      <td>51.226</td>\n",
       "      <td>1.5612</td>\n",
       "      <td>39.442</td>\n",
       "      <td>17.4987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Unnamed: 0     USD     JPY     BGN     CZK     DKK  EEK     ILS      GBP  \\\n",
       "0   4 Jan 16  1.0898  129.78  1.9558  27.023  7.4620  NaN  4.2659  0.73810   \n",
       "1   5 Jan 16  1.0746  127.88  1.9558  27.022  7.4605  NaN  4.2144  0.73235   \n",
       "2   6 Jan 16  1.0742  127.19  1.9558  27.026  7.4603  NaN  4.2389  0.73440   \n",
       "3   7 Jan 16  1.0868  127.74  1.9558  27.030  7.4596  NaN  4.2700  0.74545   \n",
       "\n",
       "      HUF  ...       IDR      INR      KRW      MXN     MYR     NZD     PHP  \\\n",
       "0  315.39  ...  15194.63  72.6170  1297.87  18.9353  4.7363  1.6146  51.393   \n",
       "1  315.20  ...  14879.48  71.5539  1277.02  18.5798  4.6670  1.6001  50.371   \n",
       "2  314.81  ...  14988.90  71.8242  1289.20  18.7480  4.7388  1.6166  50.588   \n",
       "3  315.79  ...  15139.18  72.7012  1306.87  19.2176  4.7904  1.6464  51.226   \n",
       "\n",
       "      SGD     THB      ZAR  \n",
       "0  1.5533  39.407  16.9558  \n",
       "1  1.5310  38.816  16.7643  \n",
       "2  1.5409  38.917  17.0032  \n",
       "3  1.5612  39.442  17.4987  \n",
       "\n",
       "[4 rows x 37 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "e514f817-4a18-40e4-9981-c37a22bcb4d9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-84-42d9f0f0534d>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-84-42d9f0f0534d>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    for i, df.iterrows():\u001b[0m\n\u001b[1;37m                        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def iterrow_example(df,col):\n",
    "    for i, df.iterrows():\n",
    "        val=row[col]\n",
    "        if val<1:\n",
    "            df.at[i,col]=200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "9058dbdf-3ac2-4a20-af10-be8703b60424",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'iterrow_example' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-90-5529f30501c7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mget_ipython\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'timeit'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"iterrow_example(df,'AUD')\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\u001b[0m in \u001b[0;36mrun_line_magic\u001b[1;34m(self, magic_name, line, _stack_depth)\u001b[0m\n\u001b[0;32m   2342\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'local_ns'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_local_scope\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstack_depth\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2343\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2344\u001b[1;33m                 \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2345\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2346\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\decorator.py\u001b[0m in \u001b[0;36mfun\u001b[1;34m(*args, **kw)\u001b[0m\n\u001b[0;32m    229\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mkwsyntax\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    230\u001b[0m                 \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkw\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfix\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msig\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 231\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mcaller\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mextras\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    232\u001b[0m     \u001b[0mfun\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    233\u001b[0m     \u001b[0mfun\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__doc__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\IPython\\core\\magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[1;34m(f, *a, **k)\u001b[0m\n\u001b[0;32m    185\u001b[0m     \u001b[1;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    186\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 187\u001b[1;33m         \u001b[0mcall\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    188\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    189\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\IPython\\core\\magics\\execution.py\u001b[0m in \u001b[0;36mtimeit\u001b[1;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[0;32m   1167\u001b[0m             \u001b[1;32mfor\u001b[0m \u001b[0mindex\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1168\u001b[0m                 \u001b[0mnumber\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m10\u001b[0m \u001b[1;33m**\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1169\u001b[1;33m                 \u001b[0mtime_number\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtimer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtimeit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnumber\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1170\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mtime_number\u001b[0m \u001b[1;33m>=\u001b[0m \u001b[1;36m0.2\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1171\u001b[0m                     \u001b[1;32mbreak\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\IPython\\core\\magics\\execution.py\u001b[0m in \u001b[0;36mtimeit\u001b[1;34m(self, number)\u001b[0m\n\u001b[0;32m    167\u001b[0m         \u001b[0mgc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdisable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    168\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 169\u001b[1;33m             \u001b[0mtiming\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minner\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mit\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtimer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    170\u001b[0m         \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    171\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mgcold\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<magic-timeit>\u001b[0m in \u001b[0;36minner\u001b[1;34m(_it, _timer)\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'iterrow_example' is not defined"
     ]
    }
   ],
   "source": [
    "%timeit iterrow_example(df,'AUD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0319d62-1082-4fac-9ce5-6308a3752a0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "Merge dataframes in Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "86576d8a-ad66-4426-8dca-973384be8e9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6e2f19d8-0e05-4bbf-84bb-45260fee3d7c",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Can only merge Series or DataFrame objects, a <class 'dict'> was passed",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-91-f3673ec126a1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mexchange_rates\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mon\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'USD'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mmerge\u001b[1;34m(self, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[0;32m   8193\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmerge\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmerge\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8194\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8195\u001b[1;33m         return merge(\n\u001b[0m\u001b[0;32m   8196\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8197\u001b[0m             \u001b[0mright\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\merge.py\u001b[0m in \u001b[0;36mmerge\u001b[1;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[0;32m     72\u001b[0m     \u001b[0mvalidate\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m ) -> \"DataFrame\":\n\u001b[1;32m---> 74\u001b[1;33m     op = _MergeOperation(\n\u001b[0m\u001b[0;32m     75\u001b[0m         \u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     76\u001b[0m         \u001b[0mright\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\merge.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[0;32m    597\u001b[0m     ):\n\u001b[0;32m    598\u001b[0m         \u001b[0m_left\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_validate_operand\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 599\u001b[1;33m         \u001b[0m_right\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_validate_operand\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    600\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mleft\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0morig_left\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_left\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    601\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mright\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0morig_right\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_right\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\merge.py\u001b[0m in \u001b[0;36m_validate_operand\u001b[1;34m(obj)\u001b[0m\n\u001b[0;32m   2146\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto_frame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2147\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2148\u001b[1;33m         raise TypeError(\n\u001b[0m\u001b[0;32m   2149\u001b[0m             \u001b[1;34mf\"Can only merge Series or DataFrame objects, a {type(obj)} was passed\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2150\u001b[0m         )\n",
      "\u001b[1;31mTypeError\u001b[0m: Can only merge Series or DataFrame objects, a <class 'dict'> was passed"
     ]
    }
   ],
   "source": [
    "df.merge(exchange_rates, on='USD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "8ba7a2b5-7531-430c-b7e1-4a620497bfd8",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Name'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-92-b71787657d17>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mleft_on\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'USD'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mright_on\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Name'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mmerge\u001b[1;34m(self, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[0;32m   8193\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmerge\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmerge\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8194\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 8195\u001b[1;33m         return merge(\n\u001b[0m\u001b[0;32m   8196\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   8197\u001b[0m             \u001b[0mright\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\merge.py\u001b[0m in \u001b[0;36mmerge\u001b[1;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[0;32m     72\u001b[0m     \u001b[0mvalidate\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m ) -> \"DataFrame\":\n\u001b[1;32m---> 74\u001b[1;33m     op = _MergeOperation(\n\u001b[0m\u001b[0;32m     75\u001b[0m         \u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     76\u001b[0m         \u001b[0mright\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\merge.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[0;32m    666\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mright_join_keys\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    667\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjoin_names\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 668\u001b[1;33m         ) = self._get_merge_keys()\n\u001b[0m\u001b[0;32m    669\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    670\u001b[0m         \u001b[1;31m# validate the merge keys dtypes. We may need to coerce\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\merge.py\u001b[0m in \u001b[0;36m_get_merge_keys\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1031\u001b[0m                     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mis_rkey\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1032\u001b[0m                         \u001b[1;32mif\u001b[0m \u001b[0mrk\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1033\u001b[1;33m                             \u001b[0mright_keys\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_label_or_level_values\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1034\u001b[0m                         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1035\u001b[0m                             \u001b[1;31m# work-around for merge_asof(right_index=True)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_get_label_or_level_values\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   1682\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_level_values\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1683\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1684\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1685\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1686\u001b[0m         \u001b[1;31m# Check for duplicates\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Name'"
     ]
    }
   ],
   "source": [
    "df.merge(df,left_on='USD',right_on='Name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "716ae729-890f-4bdc-a879-4fbe94aac1bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "Defining a custom function to create a reusable code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e9a1c6e-dec7-4d9d-9477-9c4123608c4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def.AUD2EUR(AUD):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae4157cf-2ff6-4f23-9820-25e7a514533e",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_AUD=(1/AUD)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7fadfcc7-8d20-45d4-a5c6-d93e9f122abb",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "'return' outside function (<ipython-input-2-93f0ba6bdea5>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-2-93f0ba6bdea5>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    return new_AUD\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m 'return' outside function\n"
     ]
    }
   ],
   "source": [
    "return new_AUD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6486376-5803-422f-a604-78117a146903",
   "metadata": {},
   "outputs": [],
   "source": [
    "Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e3181c2e-5f1f-4c90-a108-ae5119e29053",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:172: RuntimeWarning: divide by zero encountered in exp2\n",
      "  eps=exp2(ld(-112)),\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:51: RuntimeWarning: divide by zero encountered in log10\n",
      "  self.precision = int(-log10(self.eps))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:52: RuntimeWarning: divide by zero encountered in power\n",
      "  self.resolution = float_to_float(float_conv(10) ** (-self.precision))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:184: RuntimeWarning: divide by zero encountered in exp2\n",
      "  epsneg_f80 = exp2(ld(-64))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:185: RuntimeWarning: divide by zero encountered in exp2\n",
      "  tiny_f80 = exp2(ld(-16382))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:199: RuntimeWarning: divide by zero encountered in exp2\n",
      "  eps=exp2(ld(-63)),\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:211: RuntimeWarning: divide by zero encountered in nextafter\n",
      "  huge_dd = (umath.nextafter(ld(inf), ld(0))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:224: RuntimeWarning: divide by zero encountered in exp2\n",
      "  eps=exp2(ld(-105)),\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:225: RuntimeWarning: divide by zero encountered in exp2\n",
      "  epsneg= exp2(ld(-106)),\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\core\\getlimits.py:227: RuntimeWarning: divide by zero encountered in exp2\n",
      "  tiny=exp2(ld(-1022)))\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py:247: RuntimeWarning: divide by zero encountered in subtract\n",
      "  if not abs(x.dot(x) - 2.0) < 1e-5:\n",
      "C:\\Users\\bmcpadden\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py:247: RuntimeWarning: divide by zero encountered in absolute\n",
      "  if not abs(x.dot(x) - 2.0) < 1e-5:\n"
     ]
    }
   ],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "88d886f0-778c-413b-b3e6-3d245a424c5d",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'numpy' has no attribute 'read_csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-d14fe6f190a7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Fx Rates.csv'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(attr)\u001b[0m\n\u001b[0;32m    212\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mTester\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    213\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 214\u001b[1;33m                 raise AttributeError(\"module {!r} has no attribute \"\n\u001b[0m\u001b[0;32m    215\u001b[0m                                      \"{!r}\".format(__name__, attr))\n\u001b[0;32m    216\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: module 'numpy' has no attribute 'read_csv'"
     ]
    }
   ],
   "source": [
    "np.read_csv('Fx Rates.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c6920a2-e7d2-40c7-b178-9af430eb771a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Dictionary in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f154627e-ca10-4b17-8cc2-6ed3c448ea9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "d={}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c77efdd4-b671-48b8-a631-aaf20d446afe",
   "metadata": {},
   "outputs": [],
   "source": [
    "d[\"AUD\"]=1.5153"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "66cf600e-4c35-444b-99c2-b80f0c846d94",
   "metadata": {},
   "outputs": [],
   "source": [
    "d[\"USD\"]=1.0898\n",
    "d[\"JPY\"]=129.78"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8dd191a0-8f23-4317-8a8d-acaf33ead968",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5153\n"
     ]
    }
   ],
   "source": [
    "print(d[\"AUD\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7ef2afd7-e53f-459d-9454-d365796de264",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0898\n"
     ]
    }
   ],
   "source": [
    "print(d[\"USD\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7b76878e-d963-4eee-ae01-9dcda3943a3b",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'GBP'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-12-78554813b421>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0md\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"GBP\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m: 'GBP'"
     ]
    }
   ],
   "source": [
    "print(d[\"GBP\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5a4d3703-9814-483a-abe2-5a329ceadbee",
   "metadata": {},
   "outputs": [],
   "source": [
    "d[\"AUD\"]=1.5455"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8868580f-e386-4767-8776-cdc3edf1164b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5455\n"
     ]
    }
   ],
   "source": [
    "print(d[\"AUD\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39890ec5-0271-4abd-9ffb-0244a0a2010d",
   "metadata": {},
   "outputs": [],
   "source": [
    "List in python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "158fcdd3-77ed-40ff-871e-d3f8bc79085c",
   "metadata": {},
   "outputs": [],
   "source": [
    "AUD=[1.5153,1.4982,1.5187,1.550]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a1ec6e67-49fb-4f0d-bb3f-7584402d5c02",
   "metadata": {},
   "outputs": [],
   "source": [
    "AUD.append(1.5459)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "89f3f102-ab08-4825-a4f7-8c4e0684dcf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "AUD.append(1.5516)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f1f4c138-f836-43f8-85c2-4d1530f5ec53",
   "metadata": {},
   "outputs": [],
   "source": [
    "AUD.append(1.546)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "69b29b45-840a-4e3a-9193-bdbdc3c1652e",
   "metadata": {},
   "outputs": [],
   "source": [
    "AUD.append(1.5413)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6c942e68-1d54-41c7-b81f-9c29b8c9009d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.5153, 1.4982, 1.5187, 1.55, 1.5459, 1.5516, 1.546, 1.5413]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5762873d-728f-498e-9d27-0ea05491427a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5153"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fd639439-77d4-4a7c-86e4-41075cb1a0f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5459"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "54e7e6aa-34e2-459d-97c7-32cc23c1ea34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5187"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD[-6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2b673183-64c1-4e9b-a0e2-b3c16b3b147a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.546"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD[-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5144dd2-802b-428e-bc83-c78faf2a5ba4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4ce81c41-5ac6-41fc-b7fd-e618a18b62d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.5153, 1.4982, 1.5187, 1.55, 1.5459, 1.5516, 1.546, 1.5413]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "530a0712-d7fd-4f10-ae85-4dc57b1858a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.55, 1.5459, 1.5516]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AUD[3:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a7fe698-a763-4606-8124-5d1e5e1c1696",
   "metadata": {},
   "outputs": [],
   "source": [
    "Create charts using Matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "af44259a-b7c0-44f3-b59a-3c83ddbaca49",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'matplotlib.pylot'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-49-c988897a33fb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpylot\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'matplotlib.pylot'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pylot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "222143b4-296d-4d69-952b-b9cf8a985bb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Date=['4/1/2016','5/1/2016','6/1/2016','7/12016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0b245779-6605-4f05-8305-556026aa4f05",
   "metadata": {},
   "outputs": [],
   "source": [
    "AUD=[0.6599,0.6675,0.6585,0.6452]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "aec58a2e-f3cf-4935-b8c0-301c5749a448",
   "metadata": {},
   "outputs": [],
   "source": [
    "USD=[0.9176,0.9306,0.9309,0.9201]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "911bbecf-1745-4d73-b3c3-69c14fdcb709",
   "metadata": {},
   "outputs": [],
   "source": [
    "DKK=[0.1340,0.1340,0.1340,0.1341]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "63c3e2ab-467a-4e66-9622-c6e9401e597c",
   "metadata": {},
   "outputs": [],
   "source": [
    "GBP=[1.3548,1.3655,1.3617,1.3415]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c947181b-9599-40a5-96b0-0ee24c01e9e5",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-48-ee688a2e2ca8>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDate\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mAUD\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'AUD'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "plt.plot(Date,AUD,label='AUD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "8c65704b-e12f-4c0f-a52b-102f8bd8993f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-47-1eb00ff78cf2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "12f8bd25-7830-4a27-9d08-0dbdb71dd0d8",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'AUD' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-8-250248928697>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mAUD\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mUSD\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mGBP\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mDKK\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'AUD' is not defined"
     ]
    }
   ],
   "source": [
    "plt.plot(AUD,USD,GBP,DKK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1d823a31-def2-448d-a69c-9f5bbde7ff75",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d74efc4e-a78c-4439-8195-5f4dc97c2a38",
   "metadata": {},
   "outputs": [],
   "source": [
    "Date=['4/1/2016','5/1/2016','6/1/2016','7/12016']\n",
    "\n",
    "AUD=[0.6599,0.6675,0.6585,0.6452]\n",
    "USD=[0.9176,0.9306,0.9309,0.9201]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9771ae5a-c058-4cba-b159-7414016cf37f",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "cannot perform accumulate with flexible type",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[1;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[0;32m     57\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 58\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mbound\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     59\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: cannot perform accumulate with flexible type",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-20-a0e021d63c96>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstackplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Date'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'AUD'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\matplotlib\\pyplot.py\u001b[0m in \u001b[0;36mstackplot\u001b[1;34m(x, labels, colors, baseline, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m   2944\u001b[0m         \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbaseline\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'zero'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2945\u001b[0m         **kwargs):\n\u001b[1;32m-> 2946\u001b[1;33m     return gca().stackplot(\n\u001b[0m\u001b[0;32m   2947\u001b[0m         \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcolors\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbaseline\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mbaseline\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2948\u001b[0m         **({\"data\": data} if data is not None else {}), **kwargs)\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\matplotlib\\__init__.py\u001b[0m in \u001b[0;36minner\u001b[1;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1445\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1446\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1447\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1448\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1449\u001b[0m         \u001b[0mbound\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\matplotlib\\stackplot.py\u001b[0m in \u001b[0;36mstackplot\u001b[1;34m(axes, x, labels, colors, baseline, *args, **kwargs)\u001b[0m\n\u001b[0;32m     68\u001b[0m     \u001b[1;31m# Assume data passed has not been 'stacked', so stack it here.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     69\u001b[0m     \u001b[1;31m# We'll need a float buffer for the upcoming calculations.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 70\u001b[1;33m     \u001b[0mstack\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcumsum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpromote_types\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     71\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     72\u001b[0m     cbook._check_in_list(['zero', 'sym', 'wiggle', 'weighted_wiggle'],\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mcumsum\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36mcumsum\u001b[1;34m(a, axis, dtype, out)\u001b[0m\n\u001b[0;32m   2481\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2482\u001b[0m     \"\"\"\n\u001b[1;32m-> 2483\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'cumsum'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2484\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2485\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[1;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[0;32m     65\u001b[0m         \u001b[1;31m# Call _wrapit from within the except clause to ensure a potential\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     66\u001b[0m         \u001b[1;31m# exception has a traceback chain.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 67\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_wrapit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     68\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     69\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36m_wrapit\u001b[1;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[0;32m     42\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     43\u001b[0m         \u001b[0mwrap\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 44\u001b[1;33m     \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     45\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mwrap\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     46\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: cannot perform accumulate with flexible type"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAD8CAYAAAB0IB+mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAANQklEQVR4nO3cX4il9X3H8fenuxEak0aJk5DurmRb1pi90KITI6VpTUObXXuxBLxQQ6QSWKQx5FIpNLnwprkohKBmWWSR3GQvGkk2ZRMplMSCNd1Z8N8qynSlOl3BNYYUDFRWv704p51hnHWenXNmZp3v+wUD85znNzPf+TH73mfPznlSVUiStr7f2ewBJEkbw+BLUhMGX5KaMPiS1ITBl6QmDL4kNbFq8JMcSfJakmfPcz5JvptkPsnTSa6b/piSpEkNucJ/GNj3Huf3A3vGbweB700+liRp2lYNflU9BrzxHksOAN+vkSeAy5J8YloDSpKmY/sUPscO4JUlxwvjx15dvjDJQUb/CuDSSy+9/uqrr57Cl5ekPk6ePPl6Vc2s5WOnEfys8NiK92uoqsPAYYDZ2dmam5ubwpeXpD6S/OdaP3Yav6WzAOxacrwTODOFzytJmqJpBP8YcMf4t3VuBH5TVe96OkeStLlWfUonyQ+Am4ArkiwA3wI+AFBVh4DjwM3APPBb4M71GlaStHarBr+qblvlfAFfm9pEkqR14SttJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJamJQ8JPsS/JCkvkk965w/iNJfpLkqSSnktw5/VElSZNYNfhJtgEPAPuBvcBtSfYuW/Y14Lmquha4CfiHJJdMeVZJ0gSGXOHfAMxX1emqegs4ChxYtqaADycJ8CHgDeDcVCeVJE1kSPB3AK8sOV4YP7bU/cCngTPAM8A3quqd5Z8oycEkc0nmzp49u8aRJUlrMST4WeGxWnb8ReBJ4PeBPwLuT/J77/qgqsNVNVtVszMzMxc4qiRpEkOCvwDsWnK8k9GV/FJ3Ao/UyDzwEnD1dEaUJE3DkOCfAPYk2T3+j9hbgWPL1rwMfAEgyceBTwGnpzmoJGky21dbUFXnktwNPApsA45U1akkd43PHwLuAx5O8gyjp4DuqarX13FuSdIFWjX4AFV1HDi+7LFDS94/A/zldEeTJE2Tr7SVpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDUxKPhJ9iV5Icl8knvPs+amJE8mOZXkF9MdU5I0qe2rLUiyDXgA+AtgATiR5FhVPbdkzWXAg8C+qno5ycfWaV5J0hoNucK/AZivqtNV9RZwFDiwbM3twCNV9TJAVb023TElSZMaEvwdwCtLjhfGjy11FXB5kp8nOZnkjpU+UZKDSeaSzJ09e3ZtE0uS1mRI8LPCY7XseDtwPfBXwBeBv0ty1bs+qOpwVc1W1ezMzMwFDytJWrtVn8NndEW/a8nxTuDMCmter6o3gTeTPAZcC7w4lSklSRMbcoV/AtiTZHeSS4BbgWPL1vwY+FyS7Uk+CHwWeH66o0qSJrHqFX5VnUtyN/AosA04UlWnktw1Pn+oqp5P8jPgaeAd4KGqenY9B5ckXZhULX86fmPMzs7W3NzcpnxtSXq/SnKyqmbX8rG+0laSmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmBgU/yb4kLySZT3Lve6z7TJK3k9wyvRElSdOwavCTbAMeAPYDe4Hbkuw9z7pvA49Oe0hJ0uSGXOHfAMxX1emqegs4ChxYYd3XgR8Cr01xPknSlAwJ/g7glSXHC+PH/l+SHcCXgEPv9YmSHEwyl2Tu7NmzFzqrJGkCQ4KfFR6rZcffAe6pqrff6xNV1eGqmq2q2ZmZmYEjSpKmYfuANQvAriXHO4Ezy9bMAkeTAFwB3JzkXFX9aBpDSpImNyT4J4A9SXYD/wXcCty+dEFV7f6/95M8DPyTsZeki8uqwa+qc0nuZvTbN9uAI1V1Ksld4/Pv+by9JOniMOQKn6o6Dhxf9tiKoa+qv558LEnStPlKW0lqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSE4OCn2RfkheSzCe5d4XzX07y9Pjt8STXTn9USdIkVg1+km3AA8B+YC9wW5K9y5a9BPxZVV0D3AccnvagkqTJDLnCvwGYr6rTVfUWcBQ4sHRBVT1eVb8eHz4B7JzumJKkSQ0J/g7glSXHC+PHzuerwE9XOpHkYJK5JHNnz54dPqUkaWJDgp8VHqsVFyafZxT8e1Y6X1WHq2q2qmZnZmaGTylJmtj2AWsWgF1LjncCZ5YvSnIN8BCwv6p+NZ3xJEnTMuQK/wSwJ8nuJJcAtwLHli5IciXwCPCVqnpx+mNKkia16hV+VZ1LcjfwKLANOFJVp5LcNT5/CPgm8FHgwSQA56pqdv3GliRdqFSt+HT8upudna25ublN+dqS9H6V5ORaL6h9pa0kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNDAp+kn1JXkgyn+TeFc4nyXfH559Oct30R5UkTWLV4CfZBjwA7Af2Arcl2bts2X5gz/jtIPC9Kc8pSZrQkCv8G4D5qjpdVW8BR4EDy9YcAL5fI08AlyX5xJRnlSRNYPuANTuAV5YcLwCfHbBmB/Dq0kVJDjL6FwDA/yR59oKm3bquAF7f7CEuEu7FIvdikXux6FNr/cAhwc8Kj9Ua1lBVh4HDAEnmqmp2wNff8tyLRe7FIvdikXuxKMncWj92yFM6C8CuJcc7gTNrWCNJ2kRDgn8C2JNkd5JLgFuBY8vWHAPuGP+2zo3Ab6rq1eWfSJK0eVZ9SqeqziW5G3gU2AYcqapTSe4anz8EHAduBuaB3wJ3Dvjah9c89dbjXixyLxa5F4vci0Vr3otUveupdknSFuQrbSWpCYMvSU2se/C9LcOiAXvx5fEePJ3k8STXbsacG2G1vViy7jNJ3k5yy0bOt5GG7EWSm5I8meRUkl9s9IwbZcCfkY8k+UmSp8Z7MeT/C993khxJ8tr5Xqu05m5W1bq9MfpP3v8A/gC4BHgK2Ltszc3ATxn9Lv+NwC/Xc6bNehu4F38MXD5+f3/nvViy7l8Y/VLALZs99yb+XFwGPAdcOT7+2GbPvYl78bfAt8fvzwBvAJds9uzrsBd/ClwHPHue82vq5npf4XtbhkWr7kVVPV5Vvx4fPsHo9Qxb0ZCfC4CvAz8EXtvI4TbYkL24HXikql4GqKqtuh9D9qKADycJ8CFGwT+3sWOuv6p6jNH3dj5r6uZ6B/98t1y40DVbwYV+n19l9Df4VrTqXiTZAXwJOLSBc22GIT8XVwGXJ/l5kpNJ7tiw6TbWkL24H/g0oxd2PgN8o6re2ZjxLipr6uaQWytMYmq3ZdgCBn+fST7PKPh/sq4TbZ4he/Ed4J6qent0MbdlDdmL7cD1wBeA3wX+LckTVfXieg+3wYbsxReBJ4E/B/4Q+Ock/1pV/73Os11s1tTN9Q6+t2VYNOj7THIN8BCwv6p+tUGzbbQhezELHB3H/grg5iTnqupHGzLhxhn6Z+T1qnoTeDPJY8C1wFYL/pC9uBP4+xo9kT2f5CXgauDfN2bEi8aaurneT+l4W4ZFq+5FkiuBR4CvbMGrt6VW3Yuq2l1Vn6yqTwL/CPzNFow9DPsz8mPgc0m2J/kgo7vVPr/Bc26EIXvxMqN/6ZDk44zuHHl6Q6e8OKypm+t6hV/rd1uG952Be/FN4KPAg+Mr23O1Be8QOHAvWhiyF1X1fJKfAU8D7wAPVdWWu7X4wJ+L+4CHkzzD6GmNe6pqy902OckPgJuAK5IsAN8CPgCTddNbK0hSE77SVpKaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrifwHXe3WluIZOawAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.stackplot('Date','AUD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b56b9bc-9d79-4230-ada3-35971968883c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Unable to run the graphs in JupyterLab. Have attached in Excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6fb331c-d480-47f4-beaa-917416504cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "Insights from Project \n",
    "\n",
    "1/ The graph shows the rate with the lowest movement in comparison to the Euro is DKK. This would be expected as DKK is pegged to the Euro\n",
    "2/ The graph shows the highest movement is GBP. This data is 6 months before brexit referendum where there was uncertainty at how the referendum would go\n",
    "3/ Austrailia & USA has steady movements\n",
    "4/ API's can be used to link in real time information to a dataset\n",
    "5/ The use of Panda's can be used to bring in CSV files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf81d21c-162a-4ed3-a3f0-fd341fa7be93",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extract file to Zip file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "691b3f65-a5dd-4b9d-a126-71ca90051b4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import zipfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b9c20dc-9677-477e-9501-acfad51bde5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "target='UCDPA_BARRY-MCPADDEN'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6c15f3dc-9094-4d35-87a1-ecaf6ef2e369",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'UCDPA_BARRY-MCPADDEN.zip'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-12-6ebffb222b17>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mhandle\u001b[0m\u001b[1;33m=\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mZipFile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'UCDPA_BARRY-MCPADDEN.zip'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\zipfile.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, file, mode, compression, allowZip64, compresslevel, strict_timestamps)\u001b[0m\n\u001b[0;32m   1249\u001b[0m             \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1250\u001b[0m                 \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1251\u001b[1;33m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mio\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilemode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1252\u001b[0m                 \u001b[1;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1253\u001b[0m                     \u001b[1;32mif\u001b[0m \u001b[0mfilemode\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mmodeDict\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'UCDPA_BARRY-MCPADDEN.zip'"
     ]
    }
   ],
   "source": [
    "handle= zipfile.ZipFile('UCDPA_BARRY-MCPADDEN.zip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b94a25d5-77e9-405f-bb50-48fc0313f2eb",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'handle' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-14-c57bbdc2f8e1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mhandle\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtarget\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcompress_type\u001b[0m\u001b[1;33m=\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mZIP_DEFLATED\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'handle' is not defined"
     ]
    }
   ],
   "source": [
    "handle.write(target,compress_type= zipfile.ZIP_DEFLATED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fcf33e9-0d41-4a6e-8ce6-b153961103be",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
